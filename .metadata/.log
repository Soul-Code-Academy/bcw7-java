!SESSION 2022-02-13 21:31:53.287 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=11.0.13
java.vendor=Ubuntu
BootLoader constants: OS=linux, ARCH=x86_64, WS=gtk, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os linux -ws gtk -arch x86_64 -product org.eclipse.epp.package.jee.product

This is a continuation of log file /home/alanadias/eclipse-workspace/java/.metadata/.bak_0.log
Created Time: 2022-02-13 23:24:18.384

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-02-13 23:24:18.384
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-02-13 23:24:18.384
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-02-13 23:24:54.038
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Lanches;

import java.util.Scanner;


public class ProgramaMain {
	public static void main(String[] args) {
		
		int escolhaDoTipoLanche;
		
		Scanner ler = new Scanner(System.in);
		
		System.out.println("--------------------------Bem vindos ao Delivery do Java Express-------------------------");
		System.out.println("");
		System.out.println("-----------------------------------Menu de opções------------------------------------------");
		System.out.println("				[ 1 ] - Sanduíches ..... R$ 10,00 + 2,00 por ingrediente escolhido");
		System.out.println("				[ 2 ] - Massas ......... R$ (depende do sabor escolhido)");
		System.out.println("				[ 3 ] - Bolos .......... R$ 120,00");
		System.out.println("				[ 4 ] - Salgados ....... (depende do salgado");
		System.out.println("Escolha a opção desejada:");
		
		escolhaDoTipoLanche = ler.nextInt();
		
		switch (escolhaDoTipoLanche) {
	     case 1:
	       	 System.out.println("                              Para o sanduíche precisa escolher os ingredientes                            ");
	    	 System.out.println("__________________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherIngrediente();
	    	 break;
	     case 2:
	    	 System.out.println("                      Você escolheu Massa. Dentre as massas, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeMassa();
	       break;
	             
	     case 3:
	    	 System.out.println("                    Você escolheu Bolo. Escolha cobertura, massa e recheio.");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 escolherBolo();    	 
	    	 break;	 
	     case 4:
	    	 System.out.println("                      Você escolheu Salgado. Dentre os salgados, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeSalgado();
	       break;
	     default:
	       System.out.println("Número inválido");
	  }
		agradecimento();
				
}
	
	public static void escolherIngrediente() {
		int escolhaDoIngrediente=11, contador=0;
		double distancia, quantIngrediente = -1;
		
		Sanduiche lanche1 = new Sanduiche();	
		Scanner lerDados = new Scanner(System.in);
		
		System.out.println("__________________________________________________________________________________________________________________");
		System.out.println("                            1 - queijo        2 - presunto       3 - bacon          4 - alface ");
		System.out.println("                            5 - tomate        6 - catupiry       7 - maionese       8 - abacaxi ");
		System.out.println("                            9 - batata Palha  10 - mostarda      0 - para encerrar a escollha");
		System.out.println(" ");
		System.out.println("                            Você pode escolher até 10 ingredientes: ");
		System.out.println("__________________________________________________________________________________________________________________");
		
		while ((contador < 10) && escolhaDoIngrediente != 0) {
					
			System.out.println("                        Digite o número do ingrediente ou [0] para encerrar a escolha ");
				
			escolhaDoIngrediente = lerDados.nextInt();
			
			switch (escolhaDoIngrediente) {
		     	case 1:
		     		lanche1.setIngrediente("queijo");
		     		break;
		     	case 2:
		     		lanche1.setIngrediente("presunto");
		     		break;
		     	case 3:
		     		lanche1.setIngrediente("bacon");
		     		break;
		     	case 4:
		     		lanche1.setIngrediente("alface");
		     		break;
		     	case 5:
		     		lanche1.setIngrediente("tomate");
		     		break;
		     	case 6:
		     		lanche1.setIngrediente("catupiry");
		     		break;	
		     	case 7:
		     		lanche1.setIngrediente("maionese");
		     		break;
		     	case 8:
		     		lanche1.setIngrediente("abacaxi");
		     		break;
		     	case 9:
		     		lanche1.setIngrediente("batata pallha");
		     		break;	
		     	case 10:
		     		lanche1.setIngrediente("mostarda");
		     		break;
		     	case 0:
		     		break;	
		     	default:
		       		System.out.println("Número inválido");
		     }
			
			contador++;
			quantIngrediente++;
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			lanche1.getIngrediente();
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			System.out.println(" ");		
		}
		
		lanche1.setPreco(10 + quantIngrediente * 2);
		lanche1.escolherQuantidade();
		mensagemTempoDeEntrega();
		distancia = lerDados.nextInt();
		lanche1.fecharPedido();
		lanche1.calcularTempo(distancia);
		
	}	
	
	public static void escolherTipoDeMassa() {
			int escolhaDoTipoMassa, escolhaTipo;
			double distancia;
			
			Scanner lerDados = new Scanner(System.in);
			Scanner ler2 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Macarrãoo..........R$ (escolher o tipo)");
			System.out.println("                                  [ 2 ] - Pizza .............R$ (escolher o sabor)");
			System.out.println("                                  [ 3 ] - Lasanha ...........R$ 45.90");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
			
			
			escolhaDoTipoMassa = ler2.nextInt();
	       
			switch (escolhaDoTipoMassa) {
	       		case 1:
	       			Massa massa1 = new Macarrao();
	       			massa1.setMolho(massa1.escolherMolho());
	
	       			System.out.println("__________________________________Tipos de macarrão a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Talaharim ...... R$ 28,40");
	       			System.out.println("                                  [ 2 ] - Pene ........... R$ 36,70");
	       			System.out.println("                                  [ 3 ] - Parafuso ....... R$ 39,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa1.setSabor("Talharim");
			     		massa1.setPreco(28.40);
			     		
			     		break;
			     	case 2:
			     		massa1.setSabor("Pene");
			     		massa1.setPreco(36.70);
			     		break;
			     	case 3:
			     		massa1.setSabor("Parafuso");
			     		massa1.setPreco(39.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu macarrão " + massa1.getSabor() + " e o molho escolhido foi: " + massa1.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa1.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	     			massa1.fecharPedido();
	     			massa1.calcularTempo(distancia);
	       			break;
	       		case 2:
	       			Massa massa2 = new Pizza();
	       			   			
	       			System.out.println("__________________________________Sabores de pizzas disponíveis______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Calabreza ...... R$ 36,40");
	       			System.out.println("                                  [ 2 ] - Atum ........... R$ 40,60");
	       			System.out.println("                                  [ 3 ] - 4 queijos ...... R$ 41,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa2.setSabor("Calabreza");
			     		massa2.setPreco(36.40);
			     		
			     		break;
			     	case 2:
			     		massa2.setSabor("Atum");
			     		massa2.setPreco(40.60);
			     		break;
			     	case 3:
			     		massa2.setSabor("4 queijos");
			     		massa2.setPreco(41.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu pizza de " + massa2.getSabor()); 
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa2.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa2.fecharPedido();
	       			massa2.calcularTempo(distancia);
	       			break;
	       		case 3:
	       			Massa massa3 = new Lasanha();
	       			massa3.setPreco(45.90);
	       			massa3.setMolho(massa3.escolherMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu lasanha e o molho escolhido foi: " + massa3.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa3.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa3.fecharPedido();
	       			massa3.calcularTempo(distancia);
	       			break;
	       		default:
	       			System.out.println("Número inválido");
	       }	
	}
		

	public static void escolherBolo() {
		int escolhaDoTipoBolo, escolha, contador=0,opcao=2;
		double distancia;
		
		Scanner lerDadosBolo = new Scanner(System.in);
		Scanner ler3 = new Scanner(System.in);
		
		Bolo bolo = new Bolo();
		bolo.setPreco(120.00);
		
		System.out.println("  ");
			System.out.println("__________________________________Tipo de Massa____________________________");
			bolo.setMassa(" Massa de pão de ló");
			System.out.println("                                  [ 1 ] - Massa de pão de ló" );	
			bolo.setMassa("Massa genoise");
			System.out.println("                                  [ 2 ] - Massa genoise");
			bolo.setMassa(" Massa amanteigada");
			System.out.println("                                  [ 3 ] - Massa amanteigada");
			bolo.setMassa(" Massa chiffon");
			System.out.println("                                  [ 4 ] - Massa chiffon" );
			System.out.println(" Escolha a opção desejada:" );
			System.out.println("  ");
			
			
			
			try {
				("1"||, "2"||, "3"||,"4")
			}catch(Exception e) {
				System.out.println("Erro: " + e.getMessage());
			}
			System.out.println("--------------------------------------------------");

			escolhaDoTipoBolo = ler3.nextInt();
			
		switch (escolhaDoTipoBolo) {
	
       		case 1:  
       		
       			System.out.println("  ");
       			System.out.println("__________________________________Cobertura e Recheio____________");
       			System.out.println(" ");
       			System.out.println("                                  [ 1 ] - Cobertura de Pasta Americana e Recheio com Frutas.");
    			System.out.println("                                  [ 2 ] - Cobertura de Fondant e Recheio com Frutas.");
       			System.out.println("                                  [ 3 ] - Cobertura de Chantilly e Recheio com Frutas.");
       			System.out.println("                                  [ 4 ] - Cobertura de Buttercream e Recheio com Frutas.");
       			System.out.println("                                  [ 5 ] - Cobertura de Pasta Americana  e Recheio Cremoso.");
    			System.out.println("                                  [ 6 ] - Cobertura de Fondant  e Recheio Cremoso.");
       			System.out.println("                                  [ 7 ] - Cobertura de Chantilly  e Recheio Cremoso.");
       			System.out.println("                                  [ 8 ] - Cobertura de Buttercream  e Recheio Cremoso.");
       			System.out.println("                                  [ 9 ] - Cobertura de Pasta Americana  e Recheio Gourmet.");
    			System.out.println("                                  [ 10 ] - Cobertura de Fondant  e Recheio Gourmet.");
       			System.out.println("                                  [ 11 ] - Cobertura de Chantilly  e Recheio Gourmet.");
       			System.out.println("                                  [ 12 ] - Cobertura de Buttercream  e Recheio Gourmet.");
       			System.out.println("                                  [ 13 ] - Cobertura de Pasta Americana   e Recheio Clássico.");
    			System.out.println("                                  [ 14 ] - Cobertura de Fondant   e Recheio Clássico.");
       			System.out.println("                                  [ 15 ] - Cobertura de Chantilly  e Recheio Clássico.");
       			System.out.println("                                  [ 16 ] - Cobertura de Buttercream e Recheio Clássico."); 
       			System.out.println(" Escolha a opção desejada:");
       			System.out.println("  ");
       			escolha = lerDadosBolo.nextInt();
       		
       			bolo.escolherQuantidade();
       			switch (escolha) {
       			
		     	case 1:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana e Recheio com Frutas.");
		     		break;
		     	case 2:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant e Recheio com Frutas.");
		     		break;
		     	case 3:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly e Recheio com Frutas.");
		     		break;
		     	case 4:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio com Frutas.");
		     		break; 
		     	case 5:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Cremoso.");
		     		break; 
		     	case 6:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Cremoso.");
		     		break; 
		     	case 7:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Cremoso.");
		     		break; 
		     	case 8:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Cremoso.");
		     		break; 
		     	case 9:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Gourmet.");
		     		break;
		     	case 10:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Gourmet.");
		     		break;
		     	case 11:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Gourmet.");
		     		break;
		     	case 12:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Gourmet.");
		     		break;	
		     	case 13:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana   e Recheio Clássico.");
		     		break;
		     	case 14:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant   e Recheio Clássico.");
		     		break;
		     	case 15:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Clássico.");
		     		break;
		     	case 16:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio Clássico."); 
		     		break;
		 
		     	default:
		       		System.out.println("Número inválido");
       			}
       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu o bolo : " + bolo.getMassa() + " "  + bolo.getRecheioEcobertura());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       		
	       			mensagemTempoDeEntrega();
	       			distancia = lerDadosBolo.nextInt();
		     		bolo.fecharPedido();
		     		bolo.calcularTempo(distancia);
		     		break;	       			
		}
	
}
	
		public static void escolherTipoDeSalgado() {
			int escolhaDoTipoSalgado, escolha;
			double distancia;
			
			Scanner lerDadosSalgado = new Scanner(System.in);
			Scanner ler4 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Salgado Assado...........R$ (escolher o nome)");
			System.out.println("                                  [ 2 ] - Salgado Frito ...........R$ (escolher o nome)");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
				
			escolhaDoTipoSalgado = ler4.nextInt();
	       
			switch (escolhaDoTipoSalgado) {
	       		case 1:
	       			Salgado salgado1 = new SalgadoAssado();
	       			System.out.println("__________________________________Salgados a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Esfiha .................... R$ 4,40");
	    			System.out.println("                                  [ 2 ] - Empada .................... R$ 6,70");
	       			System.out.println("                                  [ 3 ] - Mini Quiche ............... R$ 9,00");
	       			System.out.println("                                  [ 4 ] - Bolinho de Carne Seca  .... R$ 8,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			  
	       			escolha = lerDadosSalgado.nextInt();
	       			salgado1.escolherQuantidade();
	       			switch (escolha) {
			     	case 1:
			     		salgado1.setNome("Esfiha");
			     		salgado1.setPreco(4.40); 		
			     		break;
			     	case 2:
			     		salgado1.setNome("Empada");
			     		salgado1.setPreco(6.70);
			     		break;
			     	case 3:
			     		salgado1.setNome("Mine Quiche");
			     		salgado1.setPreco(9.00);
			     		break;
			     	case 4:
			     		salgado1.setNome("Bolinho de Carne Seca");
			     		salgado1.setPreco(8.00);
			     		break; 	
			     	default:
			       		System.out.println("Número inválido");
	       			}
		       			
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			System.out.println("                           Você escolheu salgado assado " + salgado1.getNome());
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			mensagemTempoDeEntrega();
		       			distancia = lerDadosSalgado.nextInt();
		     			salgado1.fecharPedido();
		     			salgado1.calcularTempo(distancia);
		       			break;
	       				
	       	case 2:
	       		
		       	Salgado salgado2 = new SalgadoFrito();
		       
		       	System.out.println("__________________________________Salgados a escolher______________________________________________");
				System.out.println(" ");
				System.out.println("                                  [ 1 ] - Pastel ...... R$ 6,00");
				System.out.println("                                  [ 2 ] - Coxinha ..... R$ 5,50");
				System.out.println("                                  [ 3 ] - Quibe ....... R$ 4,00");
				System.out.println("                                  [ 4 ] - Croquete  ... R$ 4,80");
				System.out.println(" Escolha a opção desejada:");
				System.out.println("  ");
				
				escolha = lerDadosSalgado.nextInt();
				salgado2.escolherQuantidade();
				switch (escolha) {
	     	case 1:
	     		salgado2.setNome("Pastel");
	     		salgado2.setPreco(6.00);
	     		break;
	     	case 2:
	     		salgado2.setNome("Coxinha");
	     		salgado2.setPreco(5.50);
	     		break;
	     	case 3:
	     		salgado2.setNome("Quibe");
	     		salgado2.setPreco(4.00);
	     		break;
	     	case 4:
	     		salgado2.setNome("Croquete");
	     		salgado2.setPreco(4.80);
	     		break;
	     	  	
	     	default:
	       		System.out.println("Número inválido");
				}
					
				System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			System.out.println("                            Você escolheu salgado frito " + salgado2.getNome() + salgado2.getQuantidade());
       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			
  
       			mensagemTempoDeEntrega();
       			distancia = lerDadosSalgado.nextInt();
       		
       			salgado2.fecharPedido();
       			salgado2.calcularTempo(distancia);
       			break;       		   			
		
			}	
		
	}
	
				
		public static void mensagemTempoDeEntrega() {
		    pularLinhas(1);
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Para cálculo do tempo de entrega, precisamos saber a distância até sua casa! ");
			System.out.println(" ");
			System.out.println(" Qual a distância da sua casa? (em km) ");
		}
		
		
		public static void pularLinhas(int quantLinhas)
	    {
	            for(int i = 0; i < quantLinhas; i++)
	            System.out.println("");
	    }
		
		public static void agradecimento() {
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Agradecemos a sua preferência e desejamos bom apetite!!!");
			System.out.println(" ");
			
		}
		
		
	
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-02-13 23:24:54.040
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-02-13 23:24:54.040
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-02-13 23:24:55.572
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Lanches;

import java.util.Scanner;


public class ProgramaMain {
	public static void main(String[] args) {
		
		int escolhaDoTipoLanche;
		
		Scanner ler = new Scanner(System.in);
		
		System.out.println("--------------------------Bem vindos ao Delivery do Java Express-------------------------");
		System.out.println("");
		System.out.println("-----------------------------------Menu de opções------------------------------------------");
		System.out.println("				[ 1 ] - Sanduíches ..... R$ 10,00 + 2,00 por ingrediente escolhido");
		System.out.println("				[ 2 ] - Massas ......... R$ (depende do sabor escolhido)");
		System.out.println("				[ 3 ] - Bolos .......... R$ 120,00");
		System.out.println("				[ 4 ] - Salgados ....... (depende do salgado");
		System.out.println("Escolha a opção desejada:");
		
		escolhaDoTipoLanche = ler.nextInt();
		
		switch (escolhaDoTipoLanche) {
	     case 1:
	       	 System.out.println("                              Para o sanduíche precisa escolher os ingredientes                            ");
	    	 System.out.println("__________________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherIngrediente();
	    	 break;
	     case 2:
	    	 System.out.println("                      Você escolheu Massa. Dentre as massas, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeMassa();
	       break;
	             
	     case 3:
	    	 System.out.println("                    Você escolheu Bolo. Escolha cobertura, massa e recheio.");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 escolherBolo();    	 
	    	 break;	 
	     case 4:
	    	 System.out.println("                      Você escolheu Salgado. Dentre os salgados, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeSalgado();
	       break;
	     default:
	       System.out.println("Número inválido");
	  }
		agradecimento();
				
}
	
	public static void escolherIngrediente() {
		int escolhaDoIngrediente=11, contador=0;
		double distancia, quantIngrediente = -1;
		
		Sanduiche lanche1 = new Sanduiche();	
		Scanner lerDados = new Scanner(System.in);
		
		System.out.println("__________________________________________________________________________________________________________________");
		System.out.println("                            1 - queijo        2 - presunto       3 - bacon          4 - alface ");
		System.out.println("                            5 - tomate        6 - catupiry       7 - maionese       8 - abacaxi ");
		System.out.println("                            9 - batata Palha  10 - mostarda      0 - para encerrar a escollha");
		System.out.println(" ");
		System.out.println("                            Você pode escolher até 10 ingredientes: ");
		System.out.println("__________________________________________________________________________________________________________________");
		
		while ((contador < 10) && escolhaDoIngrediente != 0) {
					
			System.out.println("                        Digite o número do ingrediente ou [0] para encerrar a escolha ");
				
			escolhaDoIngrediente = lerDados.nextInt();
			
			switch (escolhaDoIngrediente) {
		     	case 1:
		     		lanche1.setIngrediente("queijo");
		     		break;
		     	case 2:
		     		lanche1.setIngrediente("presunto");
		     		break;
		     	case 3:
		     		lanche1.setIngrediente("bacon");
		     		break;
		     	case 4:
		     		lanche1.setIngrediente("alface");
		     		break;
		     	case 5:
		     		lanche1.setIngrediente("tomate");
		     		break;
		     	case 6:
		     		lanche1.setIngrediente("catupiry");
		     		break;	
		     	case 7:
		     		lanche1.setIngrediente("maionese");
		     		break;
		     	case 8:
		     		lanche1.setIngrediente("abacaxi");
		     		break;
		     	case 9:
		     		lanche1.setIngrediente("batata pallha");
		     		break;	
		     	case 10:
		     		lanche1.setIngrediente("mostarda");
		     		break;
		     	case 0:
		     		break;	
		     	default:
		       		System.out.println("Número inválido");
		     }
			
			contador++;
			quantIngrediente++;
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			lanche1.getIngrediente();
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			System.out.println(" ");		
		}
		
		lanche1.setPreco(10 + quantIngrediente * 2);
		lanche1.escolherQuantidade();
		mensagemTempoDeEntrega();
		distancia = lerDados.nextInt();
		lanche1.fecharPedido();
		lanche1.calcularTempo(distancia);
		
	}	
	
	public static void escolherTipoDeMassa() {
			int escolhaDoTipoMassa, escolhaTipo;
			double distancia;
			
			Scanner lerDados = new Scanner(System.in);
			Scanner ler2 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Macarrãoo..........R$ (escolher o tipo)");
			System.out.println("                                  [ 2 ] - Pizza .............R$ (escolher o sabor)");
			System.out.println("                                  [ 3 ] - Lasanha ...........R$ 45.90");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
			
			
			escolhaDoTipoMassa = ler2.nextInt();
	       
			switch (escolhaDoTipoMassa) {
	       		case 1:
	       			Massa massa1 = new Macarrao();
	       			massa1.setMolho(massa1.escolherMolho());
	
	       			System.out.println("__________________________________Tipos de macarrão a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Talaharim ...... R$ 28,40");
	       			System.out.println("                                  [ 2 ] - Pene ........... R$ 36,70");
	       			System.out.println("                                  [ 3 ] - Parafuso ....... R$ 39,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa1.setSabor("Talharim");
			     		massa1.setPreco(28.40);
			     		
			     		break;
			     	case 2:
			     		massa1.setSabor("Pene");
			     		massa1.setPreco(36.70);
			     		break;
			     	case 3:
			     		massa1.setSabor("Parafuso");
			     		massa1.setPreco(39.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu macarrão " + massa1.getSabor() + " e o molho escolhido foi: " + massa1.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa1.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	     			massa1.fecharPedido();
	     			massa1.calcularTempo(distancia);
	       			break;
	       		case 2:
	       			Massa massa2 = new Pizza();
	       			   			
	       			System.out.println("__________________________________Sabores de pizzas disponíveis______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Calabreza ...... R$ 36,40");
	       			System.out.println("                                  [ 2 ] - Atum ........... R$ 40,60");
	       			System.out.println("                                  [ 3 ] - 4 queijos ...... R$ 41,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa2.setSabor("Calabreza");
			     		massa2.setPreco(36.40);
			     		
			     		break;
			     	case 2:
			     		massa2.setSabor("Atum");
			     		massa2.setPreco(40.60);
			     		break;
			     	case 3:
			     		massa2.setSabor("4 queijos");
			     		massa2.setPreco(41.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu pizza de " + massa2.getSabor()); 
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa2.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa2.fecharPedido();
	       			massa2.calcularTempo(distancia);
	       			break;
	       		case 3:
	       			Massa massa3 = new Lasanha();
	       			massa3.setPreco(45.90);
	       			massa3.setMolho(massa3.escolherMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu lasanha e o molho escolhido foi: " + massa3.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa3.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa3.fecharPedido();
	       			massa3.calcularTempo(distancia);
	       			break;
	       		default:
	       			System.out.println("Número inválido");
	       }	
	}
		

	public static void escolherBolo() {
		int escolhaDoTipoBolo, escolha, contador=0,opcao=2;
		double distancia;
		
		Scanner lerDadosBolo = new Scanner(System.in);
		Scanner ler3 = new Scanner(System.in);
		
		Bolo bolo = new Bolo();
		bolo.setPreco(120.00);
		
		System.out.println("  ");
			System.out.println("__________________________________Tipo de Massa____________________________");
			bolo.setMassa(" Massa de pão de ló");
			System.out.println("                                  [ 1 ] - Massa de pão de ló" );	
			bolo.setMassa("Massa genoise");
			System.out.println("                                  [ 2 ] - Massa genoise");
			bolo.setMassa(" Massa amanteigada");
			System.out.println("                                  [ 3 ] - Massa amanteigada");
			bolo.setMassa(" Massa chiffon");
			System.out.println("                                  [ 4 ] - Massa chiffon" );
			System.out.println(" Escolha a opção desejada:" );
			System.out.println("  ");
			
			
			
			try {
				("1"||, "2"||, "3"||,"4");
			}catch(Exception e) {
				System.out.println("Erro: " + e.getMessage());
			}
			System.out.println("--------------------------------------------------");

			escolhaDoTipoBolo = ler3.nextInt();
			
		switch (escolhaDoTipoBolo) {
	
       		case 1:  
       		
       			System.out.println("  ");
       			System.out.println("__________________________________Cobertura e Recheio____________");
       			System.out.println(" ");
       			System.out.println("                                  [ 1 ] - Cobertura de Pasta Americana e Recheio com Frutas.");
    			System.out.println("                                  [ 2 ] - Cobertura de Fondant e Recheio com Frutas.");
       			System.out.println("                                  [ 3 ] - Cobertura de Chantilly e Recheio com Frutas.");
       			System.out.println("                                  [ 4 ] - Cobertura de Buttercream e Recheio com Frutas.");
       			System.out.println("                                  [ 5 ] - Cobertura de Pasta Americana  e Recheio Cremoso.");
    			System.out.println("                                  [ 6 ] - Cobertura de Fondant  e Recheio Cremoso.");
       			System.out.println("                                  [ 7 ] - Cobertura de Chantilly  e Recheio Cremoso.");
       			System.out.println("                                  [ 8 ] - Cobertura de Buttercream  e Recheio Cremoso.");
       			System.out.println("                                  [ 9 ] - Cobertura de Pasta Americana  e Recheio Gourmet.");
    			System.out.println("                                  [ 10 ] - Cobertura de Fondant  e Recheio Gourmet.");
       			System.out.println("                                  [ 11 ] - Cobertura de Chantilly  e Recheio Gourmet.");
       			System.out.println("                                  [ 12 ] - Cobertura de Buttercream  e Recheio Gourmet.");
       			System.out.println("                                  [ 13 ] - Cobertura de Pasta Americana   e Recheio Clássico.");
    			System.out.println("                                  [ 14 ] - Cobertura de Fondant   e Recheio Clássico.");
       			System.out.println("                                  [ 15 ] - Cobertura de Chantilly  e Recheio Clássico.");
       			System.out.println("                                  [ 16 ] - Cobertura de Buttercream e Recheio Clássico."); 
       			System.out.println(" Escolha a opção desejada:");
       			System.out.println("  ");
       			escolha = lerDadosBolo.nextInt();
       		
       			bolo.escolherQuantidade();
       			switch (escolha) {
       			
		     	case 1:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana e Recheio com Frutas.");
		     		break;
		     	case 2:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant e Recheio com Frutas.");
		     		break;
		     	case 3:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly e Recheio com Frutas.");
		     		break;
		     	case 4:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio com Frutas.");
		     		break; 
		     	case 5:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Cremoso.");
		     		break; 
		     	case 6:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Cremoso.");
		     		break; 
		     	case 7:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Cremoso.");
		     		break; 
		     	case 8:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Cremoso.");
		     		break; 
		     	case 9:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Gourmet.");
		     		break;
		     	case 10:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Gourmet.");
		     		break;
		     	case 11:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Gourmet.");
		     		break;
		     	case 12:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Gourmet.");
		     		break;	
		     	case 13:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana   e Recheio Clássico.");
		     		break;
		     	case 14:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant   e Recheio Clássico.");
		     		break;
		     	case 15:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Clássico.");
		     		break;
		     	case 16:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio Clássico."); 
		     		break;
		 
		     	default:
		       		System.out.println("Número inválido");
       			}
       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu o bolo : " + bolo.getMassa() + " "  + bolo.getRecheioEcobertura());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       		
	       			mensagemTempoDeEntrega();
	       			distancia = lerDadosBolo.nextInt();
		     		bolo.fecharPedido();
		     		bolo.calcularTempo(distancia);
		     		break;	       			
		}
	
}
	
		public static void escolherTipoDeSalgado() {
			int escolhaDoTipoSalgado, escolha;
			double distancia;
			
			Scanner lerDadosSalgado = new Scanner(System.in);
			Scanner ler4 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Salgado Assado...........R$ (escolher o nome)");
			System.out.println("                                  [ 2 ] - Salgado Frito ...........R$ (escolher o nome)");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
				
			escolhaDoTipoSalgado = ler4.nextInt();
	       
			switch (escolhaDoTipoSalgado) {
	       		case 1:
	       			Salgado salgado1 = new SalgadoAssado();
	       			System.out.println("__________________________________Salgados a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Esfiha .................... R$ 4,40");
	    			System.out.println("                                  [ 2 ] - Empada .................... R$ 6,70");
	       			System.out.println("                                  [ 3 ] - Mini Quiche ............... R$ 9,00");
	       			System.out.println("                                  [ 4 ] - Bolinho de Carne Seca  .... R$ 8,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			  
	       			escolha = lerDadosSalgado.nextInt();
	       			salgado1.escolherQuantidade();
	       			switch (escolha) {
			     	case 1:
			     		salgado1.setNome("Esfiha");
			     		salgado1.setPreco(4.40); 		
			     		break;
			     	case 2:
			     		salgado1.setNome("Empada");
			     		salgado1.setPreco(6.70);
			     		break;
			     	case 3:
			     		salgado1.setNome("Mine Quiche");
			     		salgado1.setPreco(9.00);
			     		break;
			     	case 4:
			     		salgado1.setNome("Bolinho de Carne Seca");
			     		salgado1.setPreco(8.00);
			     		break; 	
			     	default:
			       		System.out.println("Número inválido");
	       			}
		       			
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			System.out.println("                           Você escolheu salgado assado " + salgado1.getNome());
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			mensagemTempoDeEntrega();
		       			distancia = lerDadosSalgado.nextInt();
		     			salgado1.fecharPedido();
		     			salgado1.calcularTempo(distancia);
		       			break;
	       				
	       	case 2:
	       		
		       	Salgado salgado2 = new SalgadoFrito();
		       
		       	System.out.println("__________________________________Salgados a escolher______________________________________________");
				System.out.println(" ");
				System.out.println("                                  [ 1 ] - Pastel ...... R$ 6,00");
				System.out.println("                                  [ 2 ] - Coxinha ..... R$ 5,50");
				System.out.println("                                  [ 3 ] - Quibe ....... R$ 4,00");
				System.out.println("                                  [ 4 ] - Croquete  ... R$ 4,80");
				System.out.println(" Escolha a opção desejada:");
				System.out.println("  ");
				
				escolha = lerDadosSalgado.nextInt();
				salgado2.escolherQuantidade();
				switch (escolha) {
	     	case 1:
	     		salgado2.setNome("Pastel");
	     		salgado2.setPreco(6.00);
	     		break;
	     	case 2:
	     		salgado2.setNome("Coxinha");
	     		salgado2.setPreco(5.50);
	     		break;
	     	case 3:
	     		salgado2.setNome("Quibe");
	     		salgado2.setPreco(4.00);
	     		break;
	     	case 4:
	     		salgado2.setNome("Croquete");
	     		salgado2.setPreco(4.80);
	     		break;
	     	  	
	     	default:
	       		System.out.println("Número inválido");
				}
					
				System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			System.out.println("                            Você escolheu salgado frito " + salgado2.getNome() + salgado2.getQuantidade());
       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			
  
       			mensagemTempoDeEntrega();
       			distancia = lerDadosSalgado.nextInt();
       		
       			salgado2.fecharPedido();
       			salgado2.calcularTempo(distancia);
       			break;       		   			
		
			}	
		
	}
	
				
		public static void mensagemTempoDeEntrega() {
		    pularLinhas(1);
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Para cálculo do tempo de entrega, precisamos saber a distância até sua casa! ");
			System.out.println(" ");
			System.out.println(" Qual a distância da sua casa? (em km) ");
		}
		
		
		public static void pularLinhas(int quantLinhas)
	    {
	            for(int i = 0; i < quantLinhas; i++)
	            System.out.println("");
	    }
		
		public static void agradecimento() {
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Agradecemos a sua preferência e desejamos bom apetite!!!");
			System.out.println(" ");
			
		}
		
		
	
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-02-13 23:24:55.574
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-02-13 23:24:55.574
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-02-13 23:24:57.104
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Lanches;

import java.util.Scanner;


public class ProgramaMain {
	public static void main(String[] args) {
		
		int escolhaDoTipoLanche;
		
		Scanner ler = new Scanner(System.in);
		
		System.out.println("--------------------------Bem vindos ao Delivery do Java Express-------------------------");
		System.out.println("");
		System.out.println("-----------------------------------Menu de opções------------------------------------------");
		System.out.println("				[ 1 ] - Sanduíches ..... R$ 10,00 + 2,00 por ingrediente escolhido");
		System.out.println("				[ 2 ] - Massas ......... R$ (depende do sabor escolhido)");
		System.out.println("				[ 3 ] - Bolos .......... R$ 120,00");
		System.out.println("				[ 4 ] - Salgados ....... (depende do salgado");
		System.out.println("Escolha a opção desejada:");
		
		escolhaDoTipoLanche = ler.nextInt();
		
		switch (escolhaDoTipoLanche) {
	     case 1:
	       	 System.out.println("                              Para o sanduíche precisa escolher os ingredientes                            ");
	    	 System.out.println("__________________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherIngrediente();
	    	 break;
	     case 2:
	    	 System.out.println("                      Você escolheu Massa. Dentre as massas, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeMassa();
	       break;
	             
	     case 3:
	    	 System.out.println("                    Você escolheu Bolo. Escolha cobertura, massa e recheio.");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 escolherBolo();    	 
	    	 break;	 
	     case 4:
	    	 System.out.println("                      Você escolheu Salgado. Dentre os salgados, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeSalgado();
	       break;
	     default:
	       System.out.println("Número inválido");
	  }
		agradecimento();
				
}
	
	public static void escolherIngrediente() {
		int escolhaDoIngrediente=11, contador=0;
		double distancia, quantIngrediente = -1;
		
		Sanduiche lanche1 = new Sanduiche();	
		Scanner lerDados = new Scanner(System.in);
		
		System.out.println("__________________________________________________________________________________________________________________");
		System.out.println("                            1 - queijo        2 - presunto       3 - bacon          4 - alface ");
		System.out.println("                            5 - tomate        6 - catupiry       7 - maionese       8 - abacaxi ");
		System.out.println("                            9 - batata Palha  10 - mostarda      0 - para encerrar a escollha");
		System.out.println(" ");
		System.out.println("                            Você pode escolher até 10 ingredientes: ");
		System.out.println("__________________________________________________________________________________________________________________");
		
		while ((contador < 10) && escolhaDoIngrediente != 0) {
					
			System.out.println("                        Digite o número do ingrediente ou [0] para encerrar a escolha ");
				
			escolhaDoIngrediente = lerDados.nextInt();
			
			switch (escolhaDoIngrediente) {
		     	case 1:
		     		lanche1.setIngrediente("queijo");
		     		break;
		     	case 2:
		     		lanche1.setIngrediente("presunto");
		     		break;
		     	case 3:
		     		lanche1.setIngrediente("bacon");
		     		break;
		     	case 4:
		     		lanche1.setIngrediente("alface");
		     		break;
		     	case 5:
		     		lanche1.setIngrediente("tomate");
		     		break;
		     	case 6:
		     		lanche1.setIngrediente("catupiry");
		     		break;	
		     	case 7:
		     		lanche1.setIngrediente("maionese");
		     		break;
		     	case 8:
		     		lanche1.setIngrediente("abacaxi");
		     		break;
		     	case 9:
		     		lanche1.setIngrediente("batata pallha");
		     		break;	
		     	case 10:
		     		lanche1.setIngrediente("mostarda");
		     		break;
		     	case 0:
		     		break;	
		     	default:
		       		System.out.println("Número inválido");
		     }
			
			contador++;
			quantIngrediente++;
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			lanche1.getIngrediente();
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			System.out.println(" ");		
		}
		
		lanche1.setPreco(10 + quantIngrediente * 2);
		lanche1.escolherQuantidade();
		mensagemTempoDeEntrega();
		distancia = lerDados.nextInt();
		lanche1.fecharPedido();
		lanche1.calcularTempo(distancia);
		
	}	
	
	public static void escolherTipoDeMassa() {
			int escolhaDoTipoMassa, escolhaTipo;
			double distancia;
			
			Scanner lerDados = new Scanner(System.in);
			Scanner ler2 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Macarrãoo..........R$ (escolher o tipo)");
			System.out.println("                                  [ 2 ] - Pizza .............R$ (escolher o sabor)");
			System.out.println("                                  [ 3 ] - Lasanha ...........R$ 45.90");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
			
			
			escolhaDoTipoMassa = ler2.nextInt();
	       
			switch (escolhaDoTipoMassa) {
	       		case 1:
	       			Massa massa1 = new Macarrao();
	       			massa1.setMolho(massa1.escolherMolho());
	
	       			System.out.println("__________________________________Tipos de macarrão a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Talaharim ...... R$ 28,40");
	       			System.out.println("                                  [ 2 ] - Pene ........... R$ 36,70");
	       			System.out.println("                                  [ 3 ] - Parafuso ....... R$ 39,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa1.setSabor("Talharim");
			     		massa1.setPreco(28.40);
			     		
			     		break;
			     	case 2:
			     		massa1.setSabor("Pene");
			     		massa1.setPreco(36.70);
			     		break;
			     	case 3:
			     		massa1.setSabor("Parafuso");
			     		massa1.setPreco(39.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu macarrão " + massa1.getSabor() + " e o molho escolhido foi: " + massa1.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa1.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	     			massa1.fecharPedido();
	     			massa1.calcularTempo(distancia);
	       			break;
	       		case 2:
	       			Massa massa2 = new Pizza();
	       			   			
	       			System.out.println("__________________________________Sabores de pizzas disponíveis______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Calabreza ...... R$ 36,40");
	       			System.out.println("                                  [ 2 ] - Atum ........... R$ 40,60");
	       			System.out.println("                                  [ 3 ] - 4 queijos ...... R$ 41,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa2.setSabor("Calabreza");
			     		massa2.setPreco(36.40);
			     		
			     		break;
			     	case 2:
			     		massa2.setSabor("Atum");
			     		massa2.setPreco(40.60);
			     		break;
			     	case 3:
			     		massa2.setSabor("4 queijos");
			     		massa2.setPreco(41.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu pizza de " + massa2.getSabor()); 
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa2.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa2.fecharPedido();
	       			massa2.calcularTempo(distancia);
	       			break;
	       		case 3:
	       			Massa massa3 = new Lasanha();
	       			massa3.setPreco(45.90);
	       			massa3.setMolho(massa3.escolherMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu lasanha e o molho escolhido foi: " + massa3.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa3.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa3.fecharPedido();
	       			massa3.calcularTempo(distancia);
	       			break;
	       		default:
	       			System.out.println("Número inválido");
	       }	
	}
		

	public static void escolherBolo() {
		int escolhaDoTipoBolo, escolha, contador=0,opcao=2;
		double distancia;
		
		Scanner lerDadosBolo = new Scanner(System.in);
		Scanner ler3 = new Scanner(System.in);
		
		Bolo bolo = new Bolo();
		bolo.setPreco(120.00);
		
		System.out.println("  ");
			System.out.println("__________________________________Tipo de Massa____________________________");
			bolo.setMassa(" Massa de pão de ló");
			System.out.println("                                  [ 1 ] - Massa de pão de ló" );	
			bolo.setMassa("Massa genoise");
			System.out.println("                                  [ 2 ] - Massa genoise");
			bolo.setMassa(" Massa amanteigada");
			System.out.println("                                  [ 3 ] - Massa amanteigada");
			bolo.setMassa(" Massa chiffon");
			System.out.println("                                  [ 4 ] - Massa chiffon" );
			System.out.println(" Escolha a opção desejada:" );
			System.out.println("  ");
			
			
			
			try {
				("1"||, "2"||, "3"||,"4");
			}catch(Exception e) {
				System.out.println("Erro: " + e.getMessage());
			}
			System.out.println("--------------------------------------------------");

			escolhaDoTipoBolo = ler3.nextInt();
			
		switch (escolhaDoTipoBolo) {
	
       		case 1:  
       		
       			System.out.println("  ");
       			System.out.println("__________________________________Cobertura e Recheio____________");
       			System.out.println(" ");
       			System.out.println("                                  [ 1 ] - Cobertura de Pasta Americana e Recheio com Frutas.");
    			System.out.println("                                  [ 2 ] - Cobertura de Fondant e Recheio com Frutas.");
       			System.out.println("                                  [ 3 ] - Cobertura de Chantilly e Recheio com Frutas.");
       			System.out.println("                                  [ 4 ] - Cobertura de Buttercream e Recheio com Frutas.");
       			System.out.println("                                  [ 5 ] - Cobertura de Pasta Americana  e Recheio Cremoso.");
    			System.out.println("                                  [ 6 ] - Cobertura de Fondant  e Recheio Cremoso.");
       			System.out.println("                                  [ 7 ] - Cobertura de Chantilly  e Recheio Cremoso.");
       			System.out.println("                                  [ 8 ] - Cobertura de Buttercream  e Recheio Cremoso.");
       			System.out.println("                                  [ 9 ] - Cobertura de Pasta Americana  e Recheio Gourmet.");
    			System.out.println("                                  [ 10 ] - Cobertura de Fondant  e Recheio Gourmet.");
       			System.out.println("                                  [ 11 ] - Cobertura de Chantilly  e Recheio Gourmet.");
       			System.out.println("                                  [ 12 ] - Cobertura de Buttercream  e Recheio Gourmet.");
       			System.out.println("                                  [ 13 ] - Cobertura de Pasta Americana   e Recheio Clássico.");
    			System.out.println("                                  [ 14 ] - Cobertura de Fondant   e Recheio Clássico.");
       			System.out.println("                                  [ 15 ] - Cobertura de Chantilly  e Recheio Clássico.");
       			System.out.println("                                  [ 16 ] - Cobertura de Buttercream e Recheio Clássico."); 
       			System.out.println(" Escolha a opção desejada:");
       			System.out.println("  ");
       			escolha = lerDadosBolo.nextInt();
       		
       			bolo.escolherQuantidade();
       			switch (escolha) {
       			
		     	case 1:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana e Recheio com Frutas.");
		     		break;
		     	case 2:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant e Recheio com Frutas.");
		     		break;
		     	case 3:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly e Recheio com Frutas.");
		     		break;
		     	case 4:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio com Frutas.");
		     		break; 
		     	case 5:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Cremoso.");
		     		break; 
		     	case 6:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Cremoso.");
		     		break; 
		     	case 7:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Cremoso.");
		     		break; 
		     	case 8:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Cremoso.");
		     		break; 
		     	case 9:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Gourmet.");
		     		break;
		     	case 10:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Gourmet.");
		     		break;
		     	case 11:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Gourmet.");
		     		break;
		     	case 12:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Gourmet.");
		     		break;	
		     	case 13:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana   e Recheio Clássico.");
		     		break;
		     	case 14:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant   e Recheio Clássico.");
		     		break;
		     	case 15:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Clássico.");
		     		break;
		     	case 16:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio Clássico."); 
		     		break;
		 
		     	default:
		       		System.out.println("Número inválido");
       			}
       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu o bolo : " + bolo.getMassa() + " "  + bolo.getRecheioEcobertura());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       		
	       			mensagemTempoDeEntrega();
	       			distancia = lerDadosBolo.nextInt();
		     		bolo.fecharPedido();
		     		bolo.calcularTempo(distancia);
		     		break;	       			
		}
	
}
	
		public static void escolherTipoDeSalgado() {
			int escolhaDoTipoSalgado, escolha;
			double distancia;
			
			Scanner lerDadosSalgado = new Scanner(System.in);
			Scanner ler4 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Salgado Assado...........R$ (escolher o nome)");
			System.out.println("                                  [ 2 ] - Salgado Frito ...........R$ (escolher o nome)");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
				
			escolhaDoTipoSalgado = ler4.nextInt();
	       
			switch (escolhaDoTipoSalgado) {
	       		case 1:
	       			Salgado salgado1 = new SalgadoAssado();
	       			System.out.println("__________________________________Salgados a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Esfiha .................... R$ 4,40");
	    			System.out.println("                                  [ 2 ] - Empada .................... R$ 6,70");
	       			System.out.println("                                  [ 3 ] - Mini Quiche ............... R$ 9,00");
	       			System.out.println("                                  [ 4 ] - Bolinho de Carne Seca  .... R$ 8,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			  
	       			escolha = lerDadosSalgado.nextInt();
	       			salgado1.escolherQuantidade();
	       			switch (escolha) {
			     	case 1:
			     		salgado1.setNome("Esfiha");
			     		salgado1.setPreco(4.40); 		
			     		break;
			     	case 2:
			     		salgado1.setNome("Empada");
			     		salgado1.setPreco(6.70);
			     		break;
			     	case 3:
			     		salgado1.setNome("Mine Quiche");
			     		salgado1.setPreco(9.00);
			     		break;
			     	case 4:
			     		salgado1.setNome("Bolinho de Carne Seca");
			     		salgado1.setPreco(8.00);
			     		break; 	
			     	default:
			       		System.out.println("Número inválido");
	       			}
		       			
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			System.out.println("                           Você escolheu salgado assado " + salgado1.getNome());
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			mensagemTempoDeEntrega();
		       			distancia = lerDadosSalgado.nextInt();
		     			salgado1.fecharPedido();
		     			salgado1.calcularTempo(distancia);
		       			break;
	       				
	       	case 2:
	       		
		       	Salgado salgado2 = new SalgadoFrito();
		       
		       	System.out.println("__________________________________Salgados a escolher______________________________________________");
				System.out.println(" ");
				System.out.println("                                  [ 1 ] - Pastel ...... R$ 6,00");
				System.out.println("                                  [ 2 ] - Coxinha ..... R$ 5,50");
				System.out.println("                                  [ 3 ] - Quibe ....... R$ 4,00");
				System.out.println("                                  [ 4 ] - Croquete  ... R$ 4,80");
				System.out.println(" Escolha a opção desejada:");
				System.out.println("  ");
				
				escolha = lerDadosSalgado.nextInt();
				salgado2.escolherQuantidade();
				switch (escolha) {
	     	case 1:
	     		salgado2.setNome("Pastel");
	     		salgado2.setPreco(6.00);
	     		break;
	     	case 2:
	     		salgado2.setNome("Coxinha");
	     		salgado2.setPreco(5.50);
	     		break;
	     	case 3:
	     		salgado2.setNome("Quibe");
	     		salgado2.setPreco(4.00);
	     		break;
	     	case 4:
	     		salgado2.setNome("Croquete");
	     		salgado2.setPreco(4.80);
	     		break;
	     	  	
	     	default:
	       		System.out.println("Número inválido");
				}
					
				System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			System.out.println("                            Você escolheu salgado frito " + salgado2.getNome() + salgado2.getQuantidade());
       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			
  
       			mensagemTempoDeEntrega();
       			distancia = lerDadosSalgado.nextInt();
       		
       			salgado2.fecharPedido();
       			salgado2.calcularTempo(distancia);
       			break;       		   			
		
			}	
		
	}
	
				
		public static void mensagemTempoDeEntrega() {
		    pularLinhas(1);
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Para cálculo do tempo de entrega, precisamos saber a distância até sua casa! ");
			System.out.println(" ");
			System.out.println(" Qual a distância da sua casa? (em km) ");
		}
		
		
		public static void pularLinhas(int quantLinhas)
	    {
	            for(int i = 0; i < quantLinhas; i++)
	            System.out.println("");
	    }
		
		public static void agradecimento() {
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Agradecemos a sua preferência e desejamos bom apetite!!!");
			System.out.println(" ");
			
		}
		
		
	
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-02-13 23:24:57.105
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-02-13 23:24:57.105
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-02-13 23:24:58.231
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Lanches;

import java.util.Scanner;


public class ProgramaMain {
	public static void main(String[] args) {
		
		int escolhaDoTipoLanche;
		
		Scanner ler = new Scanner(System.in);
		
		System.out.println("--------------------------Bem vindos ao Delivery do Java Express-------------------------");
		System.out.println("");
		System.out.println("-----------------------------------Menu de opções------------------------------------------");
		System.out.println("				[ 1 ] - Sanduíches ..... R$ 10,00 + 2,00 por ingrediente escolhido");
		System.out.println("				[ 2 ] - Massas ......... R$ (depende do sabor escolhido)");
		System.out.println("				[ 3 ] - Bolos .......... R$ 120,00");
		System.out.println("				[ 4 ] - Salgados ....... (depende do salgado");
		System.out.println("Escolha a opção desejada:");
		
		escolhaDoTipoLanche = ler.nextInt();
		
		switch (escolhaDoTipoLanche) {
	     case 1:
	       	 System.out.println("                              Para o sanduíche precisa escolher os ingredientes                            ");
	    	 System.out.println("__________________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherIngrediente();
	    	 break;
	     case 2:
	    	 System.out.println("                      Você escolheu Massa. Dentre as massas, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeMassa();
	       break;
	             
	     case 3:
	    	 System.out.println("                    Você escolheu Bolo. Escolha cobertura, massa e recheio.");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 escolherBolo();    	 
	    	 break;	 
	     case 4:
	    	 System.out.println("                      Você escolheu Salgado. Dentre os salgados, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeSalgado();
	       break;
	     default:
	       System.out.println("Número inválido");
	  }
		agradecimento();
				
}
	
	public static void escolherIngrediente() {
		int escolhaDoIngrediente=11, contador=0;
		double distancia, quantIngrediente = -1;
		
		Sanduiche lanche1 = new Sanduiche();	
		Scanner lerDados = new Scanner(System.in);
		
		System.out.println("__________________________________________________________________________________________________________________");
		System.out.println("                            1 - queijo        2 - presunto       3 - bacon          4 - alface ");
		System.out.println("                            5 - tomate        6 - catupiry       7 - maionese       8 - abacaxi ");
		System.out.println("                            9 - batata Palha  10 - mostarda      0 - para encerrar a escollha");
		System.out.println(" ");
		System.out.println("                            Você pode escolher até 10 ingredientes: ");
		System.out.println("__________________________________________________________________________________________________________________");
		
		while ((contador < 10) && escolhaDoIngrediente != 0) {
					
			System.out.println("                        Digite o número do ingrediente ou [0] para encerrar a escolha ");
				
			escolhaDoIngrediente = lerDados.nextInt();
			
			switch (escolhaDoIngrediente) {
		     	case 1:
		     		lanche1.setIngrediente("queijo");
		     		break;
		     	case 2:
		     		lanche1.setIngrediente("presunto");
		     		break;
		     	case 3:
		     		lanche1.setIngrediente("bacon");
		     		break;
		     	case 4:
		     		lanche1.setIngrediente("alface");
		     		break;
		     	case 5:
		     		lanche1.setIngrediente("tomate");
		     		break;
		     	case 6:
		     		lanche1.setIngrediente("catupiry");
		     		break;	
		     	case 7:
		     		lanche1.setIngrediente("maionese");
		     		break;
		     	case 8:
		     		lanche1.setIngrediente("abacaxi");
		     		break;
		     	case 9:
		     		lanche1.setIngrediente("batata pallha");
		     		break;	
		     	case 10:
		     		lanche1.setIngrediente("mostarda");
		     		break;
		     	case 0:
		     		break;	
		     	default:
		       		System.out.println("Número inválido");
		     }
			
			contador++;
			quantIngrediente++;
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			lanche1.getIngrediente();
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			System.out.println(" ");		
		}
		
		lanche1.setPreco(10 + quantIngrediente * 2);
		lanche1.escolherQuantidade();
		mensagemTempoDeEntrega();
		distancia = lerDados.nextInt();
		lanche1.fecharPedido();
		lanche1.calcularTempo(distancia);
		
	}	
	
	public static void escolherTipoDeMassa() {
			int escolhaDoTipoMassa, escolhaTipo;
			double distancia;
			
			Scanner lerDados = new Scanner(System.in);
			Scanner ler2 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Macarrãoo..........R$ (escolher o tipo)");
			System.out.println("                                  [ 2 ] - Pizza .............R$ (escolher o sabor)");
			System.out.println("                                  [ 3 ] - Lasanha ...........R$ 45.90");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
			
			
			escolhaDoTipoMassa = ler2.nextInt();
	       
			switch (escolhaDoTipoMassa) {
	       		case 1:
	       			Massa massa1 = new Macarrao();
	       			massa1.setMolho(massa1.escolherMolho());
	
	       			System.out.println("__________________________________Tipos de macarrão a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Talaharim ...... R$ 28,40");
	       			System.out.println("                                  [ 2 ] - Pene ........... R$ 36,70");
	       			System.out.println("                                  [ 3 ] - Parafuso ....... R$ 39,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa1.setSabor("Talharim");
			     		massa1.setPreco(28.40);
			     		
			     		break;
			     	case 2:
			     		massa1.setSabor("Pene");
			     		massa1.setPreco(36.70);
			     		break;
			     	case 3:
			     		massa1.setSabor("Parafuso");
			     		massa1.setPreco(39.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu macarrão " + massa1.getSabor() + " e o molho escolhido foi: " + massa1.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa1.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	     			massa1.fecharPedido();
	     			massa1.calcularTempo(distancia);
	       			break;
	       		case 2:
	       			Massa massa2 = new Pizza();
	       			   			
	       			System.out.println("__________________________________Sabores de pizzas disponíveis______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Calabreza ...... R$ 36,40");
	       			System.out.println("                                  [ 2 ] - Atum ........... R$ 40,60");
	       			System.out.println("                                  [ 3 ] - 4 queijos ...... R$ 41,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa2.setSabor("Calabreza");
			     		massa2.setPreco(36.40);
			     		
			     		break;
			     	case 2:
			     		massa2.setSabor("Atum");
			     		massa2.setPreco(40.60);
			     		break;
			     	case 3:
			     		massa2.setSabor("4 queijos");
			     		massa2.setPreco(41.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu pizza de " + massa2.getSabor()); 
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa2.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa2.fecharPedido();
	       			massa2.calcularTempo(distancia);
	       			break;
	       		case 3:
	       			Massa massa3 = new Lasanha();
	       			massa3.setPreco(45.90);
	       			massa3.setMolho(massa3.escolherMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu lasanha e o molho escolhido foi: " + massa3.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa3.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa3.fecharPedido();
	       			massa3.calcularTempo(distancia);
	       			break;
	       		default:
	       			System.out.println("Número inválido");
	       }	
	}
		

	public static void escolherBolo() {
		int escolhaDoTipoBolo, escolha, contador=0,opcao=2;
		double distancia;
		
		Scanner lerDadosBolo = new Scanner(System.in);
		Scanner ler3 = new Scanner(System.in);
		
		Bolo bolo = new Bolo();
		bolo.setPreco(120.00);
		
		System.out.println("  ");
			System.out.println("__________________________________Tipo de Massa____________________________");
			bolo.setMassa(" Massa de pão de ló");
			System.out.println("                                  [ 1 ] - Massa de pão de ló" );	
			bolo.setMassa("Massa genoise");
			System.out.println("                                  [ 2 ] - Massa genoise");
			bolo.setMassa(" Massa amanteigada");
			System.out.println("                                  [ 3 ] - Massa amanteigada");
			bolo.setMassa(" Massa chiffon");
			System.out.println("                                  [ 4 ] - Massa chiffon" );
			System.out.println(" Escolha a opção desejada:" );
			System.out.println("  ");
			
			
			
			try {
				("1"||, "2"||, "3"||,"4");
			}catch(Exception e) {
				System.out.println("Erro: " + e.getMessage());
			}
			System.out.println("--------------------------------------------------");

			escolhaDoTipoBolo = ler3.nextInt();
			
		switch (escolhaDoTipoBolo) {
	
       		case 1:  
       		
       			System.out.println("  ");
       			System.out.println("__________________________________Cobertura e Recheio____________");
       			System.out.println(" ");
       			System.out.println("                                  [ 1 ] - Cobertura de Pasta Americana e Recheio com Frutas.");
    			System.out.println("                                  [ 2 ] - Cobertura de Fondant e Recheio com Frutas.");
       			System.out.println("                                  [ 3 ] - Cobertura de Chantilly e Recheio com Frutas.");
       			System.out.println("                                  [ 4 ] - Cobertura de Buttercream e Recheio com Frutas.");
       			System.out.println("                                  [ 5 ] - Cobertura de Pasta Americana  e Recheio Cremoso.");
    			System.out.println("                                  [ 6 ] - Cobertura de Fondant  e Recheio Cremoso.");
       			System.out.println("                                  [ 7 ] - Cobertura de Chantilly  e Recheio Cremoso.");
       			System.out.println("                                  [ 8 ] - Cobertura de Buttercream  e Recheio Cremoso.");
       			System.out.println("                                  [ 9 ] - Cobertura de Pasta Americana  e Recheio Gourmet.");
    			System.out.println("                                  [ 10 ] - Cobertura de Fondant  e Recheio Gourmet.");
       			System.out.println("                                  [ 11 ] - Cobertura de Chantilly  e Recheio Gourmet.");
       			System.out.println("                                  [ 12 ] - Cobertura de Buttercream  e Recheio Gourmet.");
       			System.out.println("                                  [ 13 ] - Cobertura de Pasta Americana   e Recheio Clássico.");
    			System.out.println("                                  [ 14 ] - Cobertura de Fondant   e Recheio Clássico.");
       			System.out.println("                                  [ 15 ] - Cobertura de Chantilly  e Recheio Clássico.");
       			System.out.println("                                  [ 16 ] - Cobertura de Buttercream e Recheio Clássico."); 
       			System.out.println(" Escolha a opção desejada:");
       			System.out.println("  ");
       			escolha = lerDadosBolo.nextInt();
       		
       			bolo.escolherQuantidade();
       			switch (escolha) {
       			
		     	case 1:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana e Recheio com Frutas.");
		     		break;
		     	case 2:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant e Recheio com Frutas.");
		     		break;
		     	case 3:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly e Recheio com Frutas.");
		     		break;
		     	case 4:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio com Frutas.");
		     		break; 
		     	case 5:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Cremoso.");
		     		break; 
		     	case 6:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Cremoso.");
		     		break; 
		     	case 7:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Cremoso.");
		     		break; 
		     	case 8:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Cremoso.");
		     		break; 
		     	case 9:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Gourmet.");
		     		break;
		     	case 10:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Gourmet.");
		     		break;
		     	case 11:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Gourmet.");
		     		break;
		     	case 12:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Gourmet.");
		     		break;	
		     	case 13:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana   e Recheio Clássico.");
		     		break;
		     	case 14:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant   e Recheio Clássico.");
		     		break;
		     	case 15:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Clássico.");
		     		break;
		     	case 16:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio Clássico."); 
		     		break;
		 
		     	default:
		       		System.out.println("Número inválido");
       			}
       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu o bolo : " + bolo.getMassa() + " "  + bolo.getRecheioEcobertura());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       		
	       			mensagemTempoDeEntrega();
	       			distancia = lerDadosBolo.nextInt();
		     		bolo.fecharPedido();
		     		bolo.calcularTempo(distancia);
		     		break;	       			
		}
	
}
	
		public static void escolherTipoDeSalgado() {
			int escolhaDoTipoSalgado, escolha;
			double distancia;
			
			Scanner lerDadosSalgado = new Scanner(System.in);
			Scanner ler4 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Salgado Assado...........R$ (escolher o nome)");
			System.out.println("                                  [ 2 ] - Salgado Frito ...........R$ (escolher o nome)");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
				
			escolhaDoTipoSalgado = ler4.nextInt();
	       
			switch (escolhaDoTipoSalgado) {
	       		case 1:
	       			Salgado salgado1 = new SalgadoAssado();
	       			System.out.println("__________________________________Salgados a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Esfiha .................... R$ 4,40");
	    			System.out.println("                                  [ 2 ] - Empada .................... R$ 6,70");
	       			System.out.println("                                  [ 3 ] - Mini Quiche ............... R$ 9,00");
	       			System.out.println("                                  [ 4 ] - Bolinho de Carne Seca  .... R$ 8,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			  
	       			escolha = lerDadosSalgado.nextInt();
	       			salgado1.escolherQuantidade();
	       			switch (escolha) {
			     	case 1:
			     		salgado1.setNome("Esfiha");
			     		salgado1.setPreco(4.40); 		
			     		break;
			     	case 2:
			     		salgado1.setNome("Empada");
			     		salgado1.setPreco(6.70);
			     		break;
			     	case 3:
			     		salgado1.setNome("Mine Quiche");
			     		salgado1.setPreco(9.00);
			     		break;
			     	case 4:
			     		salgado1.setNome("Bolinho de Carne Seca");
			     		salgado1.setPreco(8.00);
			     		break; 	
			     	default:
			       		System.out.println("Número inválido");
	       			}
		       			
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			System.out.println("                           Você escolheu salgado assado " + salgado1.getNome());
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			mensagemTempoDeEntrega();
		       			distancia = lerDadosSalgado.nextInt();
		     			salgado1.fecharPedido();
		     			salgado1.calcularTempo(distancia);
		       			break;
	       				
	       	case 2:
	       		
		       	Salgado salgado2 = new SalgadoFrito();
		       
		       	System.out.println("__________________________________Salgados a escolher______________________________________________");
				System.out.println(" ");
				System.out.println("                                  [ 1 ] - Pastel ...... R$ 6,00");
				System.out.println("                                  [ 2 ] - Coxinha ..... R$ 5,50");
				System.out.println("                                  [ 3 ] - Quibe ....... R$ 4,00");
				System.out.println("                                  [ 4 ] - Croquete  ... R$ 4,80");
				System.out.println(" Escolha a opção desejada:");
				System.out.println("  ");
				
				escolha = lerDadosSalgado.nextInt();
				salgado2.escolherQuantidade();
				switch (escolha) {
	     	case 1:
	     		salgado2.setNome("Pastel");
	     		salgado2.setPreco(6.00);
	     		break;
	     	case 2:
	     		salgado2.setNome("Coxinha");
	     		salgado2.setPreco(5.50);
	     		break;
	     	case 3:
	     		salgado2.setNome("Quibe");
	     		salgado2.setPreco(4.00);
	     		break;
	     	case 4:
	     		salgado2.setNome("Croquete");
	     		salgado2.setPreco(4.80);
	     		break;
	     	  	
	     	default:
	       		System.out.println("Número inválido");
				}
					
				System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			System.out.println("                            Você escolheu salgado frito " + salgado2.getNome() + salgado2.getQuantidade());
       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			
  
       			mensagemTempoDeEntrega();
       			distancia = lerDadosSalgado.nextInt();
       		
       			salgado2.fecharPedido();
       			salgado2.calcularTempo(distancia);
       			break;       		   			
		
			}	
		
	}
	
				
		public static void mensagemTempoDeEntrega() {
		    pularLinhas(1);
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Para cálculo do tempo de entrega, precisamos saber a distância até sua casa! ");
			System.out.println(" ");
			System.out.println(" Qual a distância da sua casa? (em km) ");
		}
		
		
		public static void pularLinhas(int quantLinhas)
	    {
	            for(int i = 0; i < quantLinhas; i++)
	            System.out.println("");
	    }
		
		public static void agradecimento() {
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Agradecemos a sua preferência e desejamos bom apetite!!!");
			System.out.println(" ");
			
		}
		
		
	
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-02-13 23:24:58.232
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-02-13 23:24:58.232
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-02-13 23:25:03.116
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Lanches;

import java.util.Scanner;


public class ProgramaMain {
	public static void main(String[] args) {
		
		int escolhaDoTipoLanche;
		
		Scanner ler = new Scanner(System.in);
		
		System.out.println("--------------------------Bem vindos ao Delivery do Java Express-------------------------");
		System.out.println("");
		System.out.println("-----------------------------------Menu de opções------------------------------------------");
		System.out.println("				[ 1 ] - Sanduíches ..... R$ 10,00 + 2,00 por ingrediente escolhido");
		System.out.println("				[ 2 ] - Massas ......... R$ (depende do sabor escolhido)");
		System.out.println("				[ 3 ] - Bolos .......... R$ 120,00");
		System.out.println("				[ 4 ] - Salgados ....... (depende do salgado");
		System.out.println("Escolha a opção desejada:");
		
		escolhaDoTipoLanche = ler.nextInt();
		
		switch (escolhaDoTipoLanche) {
	     case 1:
	       	 System.out.println("                              Para o sanduíche precisa escolher os ingredientes                            ");
	    	 System.out.println("__________________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherIngrediente();
	    	 break;
	     case 2:
	    	 System.out.println("                      Você escolheu Massa. Dentre as massas, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeMassa();
	       break;
	             
	     case 3:
	    	 System.out.println("                    Você escolheu Bolo. Escolha cobertura, massa e recheio.");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 escolherBolo();    	 
	    	 break;	 
	     case 4:
	    	 System.out.println("                      Você escolheu Salgado. Dentre os salgados, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeSalgado();
	       break;
	     default:
	       System.out.println("Número inválido");
	  }
		agradecimento();
				
}
	
	public static void escolherIngrediente() {
		int escolhaDoIngrediente=11, contador=0;
		double distancia, quantIngrediente = -1;
		
		Sanduiche lanche1 = new Sanduiche();	
		Scanner lerDados = new Scanner(System.in);
		
		System.out.println("__________________________________________________________________________________________________________________");
		System.out.println("                            1 - queijo        2 - presunto       3 - bacon          4 - alface ");
		System.out.println("                            5 - tomate        6 - catupiry       7 - maionese       8 - abacaxi ");
		System.out.println("                            9 - batata Palha  10 - mostarda      0 - para encerrar a escollha");
		System.out.println(" ");
		System.out.println("                            Você pode escolher até 10 ingredientes: ");
		System.out.println("__________________________________________________________________________________________________________________");
		
		while ((contador < 10) && escolhaDoIngrediente != 0) {
					
			System.out.println("                        Digite o número do ingrediente ou [0] para encerrar a escolha ");
				
			escolhaDoIngrediente = lerDados.nextInt();
			
			switch (escolhaDoIngrediente) {
		     	case 1:
		     		lanche1.setIngrediente("queijo");
		     		break;
		     	case 2:
		     		lanche1.setIngrediente("presunto");
		     		break;
		     	case 3:
		     		lanche1.setIngrediente("bacon");
		     		break;
		     	case 4:
		     		lanche1.setIngrediente("alface");
		     		break;
		     	case 5:
		     		lanche1.setIngrediente("tomate");
		     		break;
		     	case 6:
		     		lanche1.setIngrediente("catupiry");
		     		break;	
		     	case 7:
		     		lanche1.setIngrediente("maionese");
		     		break;
		     	case 8:
		     		lanche1.setIngrediente("abacaxi");
		     		break;
		     	case 9:
		     		lanche1.setIngrediente("batata pallha");
		     		break;	
		     	case 10:
		     		lanche1.setIngrediente("mostarda");
		     		break;
		     	case 0:
		     		break;	
		     	default:
		       		System.out.println("Número inválido");
		     }
			
			contador++;
			quantIngrediente++;
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			lanche1.getIngrediente();
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			System.out.println(" ");		
		}
		
		lanche1.setPreco(10 + quantIngrediente * 2);
		lanche1.escolherQuantidade();
		mensagemTempoDeEntrega();
		distancia = lerDados.nextInt();
		lanche1.fecharPedido();
		lanche1.calcularTempo(distancia);
		
	}	
	
	public static void escolherTipoDeMassa() {
			int escolhaDoTipoMassa, escolhaTipo;
			double distancia;
			
			Scanner lerDados = new Scanner(System.in);
			Scanner ler2 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Macarrãoo..........R$ (escolher o tipo)");
			System.out.println("                                  [ 2 ] - Pizza .............R$ (escolher o sabor)");
			System.out.println("                                  [ 3 ] - Lasanha ...........R$ 45.90");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
			
			
			escolhaDoTipoMassa = ler2.nextInt();
	       
			switch (escolhaDoTipoMassa) {
	       		case 1:
	       			Massa massa1 = new Macarrao();
	       			massa1.setMolho(massa1.escolherMolho());
	
	       			System.out.println("__________________________________Tipos de macarrão a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Talaharim ...... R$ 28,40");
	       			System.out.println("                                  [ 2 ] - Pene ........... R$ 36,70");
	       			System.out.println("                                  [ 3 ] - Parafuso ....... R$ 39,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa1.setSabor("Talharim");
			     		massa1.setPreco(28.40);
			     		
			     		break;
			     	case 2:
			     		massa1.setSabor("Pene");
			     		massa1.setPreco(36.70);
			     		break;
			     	case 3:
			     		massa1.setSabor("Parafuso");
			     		massa1.setPreco(39.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu macarrão " + massa1.getSabor() + " e o molho escolhido foi: " + massa1.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa1.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	     			massa1.fecharPedido();
	     			massa1.calcularTempo(distancia);
	       			break;
	       		case 2:
	       			Massa massa2 = new Pizza();
	       			   			
	       			System.out.println("__________________________________Sabores de pizzas disponíveis______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Calabreza ...... R$ 36,40");
	       			System.out.println("                                  [ 2 ] - Atum ........... R$ 40,60");
	       			System.out.println("                                  [ 3 ] - 4 queijos ...... R$ 41,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa2.setSabor("Calabreza");
			     		massa2.setPreco(36.40);
			     		
			     		break;
			     	case 2:
			     		massa2.setSabor("Atum");
			     		massa2.setPreco(40.60);
			     		break;
			     	case 3:
			     		massa2.setSabor("4 queijos");
			     		massa2.setPreco(41.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu pizza de " + massa2.getSabor()); 
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa2.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa2.fecharPedido();
	       			massa2.calcularTempo(distancia);
	       			break;
	       		case 3:
	       			Massa massa3 = new Lasanha();
	       			massa3.setPreco(45.90);
	       			massa3.setMolho(massa3.escolherMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu lasanha e o molho escolhido foi: " + massa3.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa3.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa3.fecharPedido();
	       			massa3.calcularTempo(distancia);
	       			break;
	       		default:
	       			System.out.println("Número inválido");
	       }	
	}
		

	public static void escolherBolo() {
		int escolhaDoTipoBolo, escolha, contador=0,opcao=2;
		double distancia;
		
		Scanner lerDadosBolo = new Scanner(System.in);
		Scanner ler3 = new Scanner(System.in);
		
		Bolo bolo = new Bolo();
		bolo.setPreco(120.00);
		
		System.out.println("  ");
			System.out.println("__________________________________Tipo de Massa____________________________");
			bolo.setMassa(" Massa de pão de ló");
			System.out.println("                                  [ 1 ] - Massa de pão de ló" );	
			bolo.setMassa("Massa genoise");
			System.out.println("                                  [ 2 ] - Massa genoise");
			bolo.setMassa(" Massa amanteigada");
			System.out.println("                                  [ 3 ] - Massa amanteigada");
			bolo.setMassa(" Massa chiffon");
			System.out.println("                                  [ 4 ] - Massa chiffon" );
			System.out.println(" Escolha a opção desejada:" );
			System.out.println("  ");
			
			
			
			try {
				("1"||, "2"||, "3"||,"4");
			}catch(Exception e) {
				System.out.println("Erro: " + e.getMessage());
			}
			System.out.println("--------------------------------------------------");

			escolhaDoTipoBolo = ler3.nextInt();
			
		switch (escolhaDoTipoBolo) {
	
       		case 1:  
       		
       			System.out.println("  ");
       			System.out.println("__________________________________Cobertura e Recheio____________");
       			System.out.println(" ");
       			System.out.println("                                  [ 1 ] - Cobertura de Pasta Americana e Recheio com Frutas.");
    			System.out.println("                                  [ 2 ] - Cobertura de Fondant e Recheio com Frutas.");
       			System.out.println("                                  [ 3 ] - Cobertura de Chantilly e Recheio com Frutas.");
       			System.out.println("                                  [ 4 ] - Cobertura de Buttercream e Recheio com Frutas.");
       			System.out.println("                                  [ 5 ] - Cobertura de Pasta Americana  e Recheio Cremoso.");
    			System.out.println("                                  [ 6 ] - Cobertura de Fondant  e Recheio Cremoso.");
       			System.out.println("                                  [ 7 ] - Cobertura de Chantilly  e Recheio Cremoso.");
       			System.out.println("                                  [ 8 ] - Cobertura de Buttercream  e Recheio Cremoso.");
       			System.out.println("                                  [ 9 ] - Cobertura de Pasta Americana  e Recheio Gourmet.");
    			System.out.println("                                  [ 10 ] - Cobertura de Fondant  e Recheio Gourmet.");
       			System.out.println("                                  [ 11 ] - Cobertura de Chantilly  e Recheio Gourmet.");
       			System.out.println("                                  [ 12 ] - Cobertura de Buttercream  e Recheio Gourmet.");
       			System.out.println("                                  [ 13 ] - Cobertura de Pasta Americana   e Recheio Clássico.");
    			System.out.println("                                  [ 14 ] - Cobertura de Fondant   e Recheio Clássico.");
       			System.out.println("                                  [ 15 ] - Cobertura de Chantilly  e Recheio Clássico.");
       			System.out.println("                                  [ 16 ] - Cobertura de Buttercream e Recheio Clássico."); 
       			System.out.println(" Escolha a opção desejada:");
       			System.out.println("  ");
       			escolha = lerDadosBolo.nextInt();
       		
       			bolo.escolherQuantidade();
       			switch (escolha) {
       			
		     	case 1:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana e Recheio com Frutas.");
		     		break;
		     	case 2:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant e Recheio com Frutas.");
		     		break;
		     	case 3:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly e Recheio com Frutas.");
		     		break;
		     	case 4:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio com Frutas.");
		     		break; 
		     	case 5:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Cremoso.");
		     		break; 
		     	case 6:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Cremoso.");
		     		break; 
		     	case 7:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Cremoso.");
		     		break; 
		     	case 8:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Cremoso.");
		     		break; 
		     	case 9:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Gourmet.");
		     		break;
		     	case 10:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Gourmet.");
		     		break;
		     	case 11:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Gourmet.");
		     		break;
		     	case 12:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Gourmet.");
		     		break;	
		     	case 13:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana   e Recheio Clássico.");
		     		break;
		     	case 14:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant   e Recheio Clássico.");
		     		break;
		     	case 15:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Clássico.");
		     		break;
		     	case 16:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio Clássico."); 
		     		break;
		 
		     	default:
		       		System.out.println("Número inválido");
       			}
       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu o bolo : " + bolo.getMassa() + " "  + bolo.getRecheioEcobertura());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       		
	       			mensagemTempoDeEntrega();
	       			distancia = lerDadosBolo.nextInt();
		     		bolo.fecharPedido();
		     		bolo.calcularTempo(distancia);
		     		break;	       			
		}
	
}
	
		public static void escolherTipoDeSalgado() {
			int escolhaDoTipoSalgado, escolha;
			double distancia;
			
			Scanner lerDadosSalgado = new Scanner(System.in);
			Scanner ler4 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Salgado Assado...........R$ (escolher o nome)");
			System.out.println("                                  [ 2 ] - Salgado Frito ...........R$ (escolher o nome)");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
				
			escolhaDoTipoSalgado = ler4.nextInt();
	       
			switch (escolhaDoTipoSalgado) {
	       		case 1:
	       			Salgado salgado1 = new SalgadoAssado();
	       			System.out.println("__________________________________Salgados a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Esfiha .................... R$ 4,40");
	    			System.out.println("                                  [ 2 ] - Empada .................... R$ 6,70");
	       			System.out.println("                                  [ 3 ] - Mini Quiche ............... R$ 9,00");
	       			System.out.println("                                  [ 4 ] - Bolinho de Carne Seca  .... R$ 8,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			  
	       			escolha = lerDadosSalgado.nextInt();
	       			salgado1.escolherQuantidade();
	       			switch (escolha) {
			     	case 1:
			     		salgado1.setNome("Esfiha");
			     		salgado1.setPreco(4.40); 		
			     		break;
			     	case 2:
			     		salgado1.setNome("Empada");
			     		salgado1.setPreco(6.70);
			     		break;
			     	case 3:
			     		salgado1.setNome("Mine Quiche");
			     		salgado1.setPreco(9.00);
			     		break;
			     	case 4:
			     		salgado1.setNome("Bolinho de Carne Seca");
			     		salgado1.setPreco(8.00);
			     		break; 	
			     	default:
			       		System.out.println("Número inválido");
	       			}
		       			
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			System.out.println("                           Você escolheu salgado assado " + salgado1.getNome());
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			mensagemTempoDeEntrega();
		       			distancia = lerDadosSalgado.nextInt();
		     			salgado1.fecharPedido();
		     			salgado1.calcularTempo(distancia);
		       			break;
	       				
	       	case 2:
	       		
		       	Salgado salgado2 = new SalgadoFrito();
		       
		       	System.out.println("__________________________________Salgados a escolher______________________________________________");
				System.out.println(" ");
				System.out.println("                                  [ 1 ] - Pastel ...... R$ 6,00");
				System.out.println("                                  [ 2 ] - Coxinha ..... R$ 5,50");
				System.out.println("                                  [ 3 ] - Quibe ....... R$ 4,00");
				System.out.println("                                  [ 4 ] - Croquete  ... R$ 4,80");
				System.out.println(" Escolha a opção desejada:");
				System.out.println("  ");
				
				escolha = lerDadosSalgado.nextInt();
				salgado2.escolherQuantidade();
				switch (escolha) {
	     	case 1:
	     		salgado2.setNome("Pastel");
	     		salgado2.setPreco(6.00);
	     		break;
	     	case 2:
	     		salgado2.setNome("Coxinha");
	     		salgado2.setPreco(5.50);
	     		break;
	     	case 3:
	     		salgado2.setNome("Quibe");
	     		salgado2.setPreco(4.00);
	     		break;
	     	case 4:
	     		salgado2.setNome("Croquete");
	     		salgado2.setPreco(4.80);
	     		break;
	     	  	
	     	default:
	       		System.out.println("Número inválido");
				}
					
				System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			System.out.println("                            Você escolheu salgado frito " + salgado2.getNome() + salgado2.getQuantidade());
       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			
  
       			mensagemTempoDeEntrega();
       			distancia = lerDadosSalgado.nextInt();
       		
       			salgado2.fecharPedido();
       			salgado2.calcularTempo(distancia);
       			break;       		   			
		
			}	
		
	}
	
				
		public static void mensagemTempoDeEntrega() {
		    pularLinhas(1);
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Para cálculo do tempo de entrega, precisamos saber a distância até sua casa! ");
			System.out.println(" ");
			System.out.println(" Qual a distância da sua casa? (em km) ");
		}
		
		
		public static void pularLinhas(int quantLinhas)
	    {
	            for(int i = 0; i < quantLinhas; i++)
	            System.out.println("");
	    }
		
		public static void agradecimento() {
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Agradecemos a sua preferência e desejamos bom apetite!!!");
			System.out.println(" ");
			
		}
		
		
	
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:5101)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:4584)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-02-13 23:25:03.116
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:5101)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:4584)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-02-13 23:25:03.116
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:5101)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:4584)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core 4 4 2022-02-13 23:25:03.125
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Lanches;

import java.util.Scanner;


public class ProgramaMain {
	public static void main(String[] args) {
		
		int escolhaDoTipoLanche;
		
		Scanner ler = new Scanner(System.in);
		
		System.out.println("--------------------------Bem vindos ao Delivery do Java Express-------------------------");
		System.out.println("");
		System.out.println("-----------------------------------Menu de opções------------------------------------------");
		System.out.println("				[ 1 ] - Sanduíches ..... R$ 10,00 + 2,00 por ingrediente escolhido");
		System.out.println("				[ 2 ] - Massas ......... R$ (depende do sabor escolhido)");
		System.out.println("				[ 3 ] - Bolos .......... R$ 120,00");
		System.out.println("				[ 4 ] - Salgados ....... (depende do salgado");
		System.out.println("Escolha a opção desejada:");
		
		escolhaDoTipoLanche = ler.nextInt();
		
		switch (escolhaDoTipoLanche) {
	     case 1:
	       	 System.out.println("                              Para o sanduíche precisa escolher os ingredientes                            ");
	    	 System.out.println("__________________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherIngrediente();
	    	 break;
	     case 2:
	    	 System.out.println("                      Você escolheu Massa. Dentre as massas, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeMassa();
	       break;
	             
	     case 3:
	    	 System.out.println("                    Você escolheu Bolo. Escolha cobertura, massa e recheio.");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 escolherBolo();    	 
	    	 break;	 
	     case 4:
	    	 System.out.println("                      Você escolheu Salgado. Dentre os salgados, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeSalgado();
	       break;
	     default:
	       System.out.println("Número inválido");
	  }
		agradecimento();
				
}
	
	public static void escolherIngrediente() {
		int escolhaDoIngrediente=11, contador=0;
		double distancia, quantIngrediente = -1;
		
		Sanduiche lanche1 = new Sanduiche();	
		Scanner lerDados = new Scanner(System.in);
		
		System.out.println("__________________________________________________________________________________________________________________");
		System.out.println("                            1 - queijo        2 - presunto       3 - bacon          4 - alface ");
		System.out.println("                            5 - tomate        6 - catupiry       7 - maionese       8 - abacaxi ");
		System.out.println("                            9 - batata Palha  10 - mostarda      0 - para encerrar a escollha");
		System.out.println(" ");
		System.out.println("                            Você pode escolher até 10 ingredientes: ");
		System.out.println("__________________________________________________________________________________________________________________");
		
		while ((contador < 10) && escolhaDoIngrediente != 0) {
					
			System.out.println("                        Digite o número do ingrediente ou [0] para encerrar a escolha ");
				
			escolhaDoIngrediente = lerDados.nextInt();
			
			switch (escolhaDoIngrediente) {
		     	case 1:
		     		lanche1.setIngrediente("queijo");
		     		break;
		     	case 2:
		     		lanche1.setIngrediente("presunto");
		     		break;
		     	case 3:
		     		lanche1.setIngrediente("bacon");
		     		break;
		     	case 4:
		     		lanche1.setIngrediente("alface");
		     		break;
		     	case 5:
		     		lanche1.setIngrediente("tomate");
		     		break;
		     	case 6:
		     		lanche1.setIngrediente("catupiry");
		     		break;	
		     	case 7:
		     		lanche1.setIngrediente("maionese");
		     		break;
		     	case 8:
		     		lanche1.setIngrediente("abacaxi");
		     		break;
		     	case 9:
		     		lanche1.setIngrediente("batata pallha");
		     		break;	
		     	case 10:
		     		lanche1.setIngrediente("mostarda");
		     		break;
		     	case 0:
		     		break;	
		     	default:
		       		System.out.println("Número inválido");
		     }
			
			contador++;
			quantIngrediente++;
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			lanche1.getIngrediente();
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			System.out.println(" ");		
		}
		
		lanche1.setPreco(10 + quantIngrediente * 2);
		lanche1.escolherQuantidade();
		mensagemTempoDeEntrega();
		distancia = lerDados.nextInt();
		lanche1.fecharPedido();
		lanche1.calcularTempo(distancia);
		
	}	
	
	public static void escolherTipoDeMassa() {
			int escolhaDoTipoMassa, escolhaTipo;
			double distancia;
			
			Scanner lerDados = new Scanner(System.in);
			Scanner ler2 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Macarrãoo..........R$ (escolher o tipo)");
			System.out.println("                                  [ 2 ] - Pizza .............R$ (escolher o sabor)");
			System.out.println("                                  [ 3 ] - Lasanha ...........R$ 45.90");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
			
			
			escolhaDoTipoMassa = ler2.nextInt();
	       
			switch (escolhaDoTipoMassa) {
	       		case 1:
	       			Massa massa1 = new Macarrao();
	       			massa1.setMolho(massa1.escolherMolho());
	
	       			System.out.println("__________________________________Tipos de macarrão a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Talaharim ...... R$ 28,40");
	       			System.out.println("                                  [ 2 ] - Pene ........... R$ 36,70");
	       			System.out.println("                                  [ 3 ] - Parafuso ....... R$ 39,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa1.setSabor("Talharim");
			     		massa1.setPreco(28.40);
			     		
			     		break;
			     	case 2:
			     		massa1.setSabor("Pene");
			     		massa1.setPreco(36.70);
			     		break;
			     	case 3:
			     		massa1.setSabor("Parafuso");
			     		massa1.setPreco(39.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu macarrão " + massa1.getSabor() + " e o molho escolhido foi: " + massa1.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa1.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	     			massa1.fecharPedido();
	     			massa1.calcularTempo(distancia);
	       			break;
	       		case 2:
	       			Massa massa2 = new Pizza();
	       			   			
	       			System.out.println("__________________________________Sabores de pizzas disponíveis______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Calabreza ...... R$ 36,40");
	       			System.out.println("                                  [ 2 ] - Atum ........... R$ 40,60");
	       			System.out.println("                                  [ 3 ] - 4 queijos ...... R$ 41,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa2.setSabor("Calabreza");
			     		massa2.setPreco(36.40);
			     		
			     		break;
			     	case 2:
			     		massa2.setSabor("Atum");
			     		massa2.setPreco(40.60);
			     		break;
			     	case 3:
			     		massa2.setSabor("4 queijos");
			     		massa2.setPreco(41.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu pizza de " + massa2.getSabor()); 
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa2.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa2.fecharPedido();
	       			massa2.calcularTempo(distancia);
	       			break;
	       		case 3:
	       			Massa massa3 = new Lasanha();
	       			massa3.setPreco(45.90);
	       			massa3.setMolho(massa3.escolherMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu lasanha e o molho escolhido foi: " + massa3.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa3.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa3.fecharPedido();
	       			massa3.calcularTempo(distancia);
	       			break;
	       		default:
	       			System.out.println("Número inválido");
	       }	
	}
		

	public static void escolherBolo() {
		int escolhaDoTipoBolo, escolha, contador=0,opcao=2;
		double distancia;
		
		Scanner lerDadosBolo = new Scanner(System.in);
		Scanner ler3 = new Scanner(System.in);
		
		Bolo bolo = new Bolo();
		bolo.setPreco(120.00);
		
		System.out.println("  ");
			System.out.println("__________________________________Tipo de Massa____________________________");
			bolo.setMassa(" Massa de pão de ló");
			System.out.println("                                  [ 1 ] - Massa de pão de ló" );	
			bolo.setMassa("Massa genoise");
			System.out.println("                                  [ 2 ] - Massa genoise");
			bolo.setMassa(" Massa amanteigada");
			System.out.println("                                  [ 3 ] - Massa amanteigada");
			bolo.setMassa(" Massa chiffon");
			System.out.println("                                  [ 4 ] - Massa chiffon" );
			System.out.println(" Escolha a opção desejada:" );
			System.out.println("  ");
			
			
			
			try {
				("1"||, "2"||, "3"||,"4");
			}catch(Exception e) {
				System.out.println("Erro: " + e.getMessage());
			}
			System.out.println("--------------------------------------------------");

			escolhaDoTipoBolo = ler3.nextInt();
			
		switch (escolhaDoTipoBolo) {
	
       		case 1:  
       		
       			System.out.println("  ");
       			System.out.println("__________________________________Cobertura e Recheio____________");
       			System.out.println(" ");
       			System.out.println("                                  [ 1 ] - Cobertura de Pasta Americana e Recheio com Frutas.");
    			System.out.println("                                  [ 2 ] - Cobertura de Fondant e Recheio com Frutas.");
       			System.out.println("                                  [ 3 ] - Cobertura de Chantilly e Recheio com Frutas.");
       			System.out.println("                                  [ 4 ] - Cobertura de Buttercream e Recheio com Frutas.");
       			System.out.println("                                  [ 5 ] - Cobertura de Pasta Americana  e Recheio Cremoso.");
    			System.out.println("                                  [ 6 ] - Cobertura de Fondant  e Recheio Cremoso.");
       			System.out.println("                                  [ 7 ] - Cobertura de Chantilly  e Recheio Cremoso.");
       			System.out.println("                                  [ 8 ] - Cobertura de Buttercream  e Recheio Cremoso.");
       			System.out.println("                                  [ 9 ] - Cobertura de Pasta Americana  e Recheio Gourmet.");
    			System.out.println("                                  [ 10 ] - Cobertura de Fondant  e Recheio Gourmet.");
       			System.out.println("                                  [ 11 ] - Cobertura de Chantilly  e Recheio Gourmet.");
       			System.out.println("                                  [ 12 ] - Cobertura de Buttercream  e Recheio Gourmet.");
       			System.out.println("                                  [ 13 ] - Cobertura de Pasta Americana   e Recheio Clássico.");
    			System.out.println("                                  [ 14 ] - Cobertura de Fondant   e Recheio Clássico.");
       			System.out.println("                                  [ 15 ] - Cobertura de Chantilly  e Recheio Clássico.");
       			System.out.println("                                  [ 16 ] - Cobertura de Buttercream e Recheio Clássico."); 
       			System.out.println(" Escolha a opção desejada:");
       			System.out.println("  ");
       			escolha = lerDadosBolo.nextInt();
       		
       			bolo.escolherQuantidade();
       			switch (escolha) {
       			
		     	case 1:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana e Recheio com Frutas.");
		     		break;
		     	case 2:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant e Recheio com Frutas.");
		     		break;
		     	case 3:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly e Recheio com Frutas.");
		     		break;
		     	case 4:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio com Frutas.");
		     		break; 
		     	case 5:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Cremoso.");
		     		break; 
		     	case 6:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Cremoso.");
		     		break; 
		     	case 7:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Cremoso.");
		     		break; 
		     	case 8:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Cremoso.");
		     		break; 
		     	case 9:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Gourmet.");
		     		break;
		     	case 10:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Gourmet.");
		     		break;
		     	case 11:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Gourmet.");
		     		break;
		     	case 12:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Gourmet.");
		     		break;	
		     	case 13:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana   e Recheio Clássico.");
		     		break;
		     	case 14:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant   e Recheio Clássico.");
		     		break;
		     	case 15:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Clássico.");
		     		break;
		     	case 16:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio Clássico."); 
		     		break;
		 
		     	default:
		       		System.out.println("Número inválido");
       			}
       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu o bolo : " + bolo.getMassa() + " "  + bolo.getRecheioEcobertura());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       		
	       			mensagemTempoDeEntrega();
	       			distancia = lerDadosBolo.nextInt();
		     		bolo.fecharPedido();
		     		bolo.calcularTempo(distancia);
		     		break;	       			
		}
	
}
	
		public static void escolherTipoDeSalgado() {
			int escolhaDoTipoSalgado, escolha;
			double distancia;
			
			Scanner lerDadosSalgado = new Scanner(System.in);
			Scanner ler4 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Salgado Assado...........R$ (escolher o nome)");
			System.out.println("                                  [ 2 ] - Salgado Frito ...........R$ (escolher o nome)");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
				
			escolhaDoTipoSalgado = ler4.nextInt();
	       
			switch (escolhaDoTipoSalgado) {
	       		case 1:
	       			Salgado salgado1 = new SalgadoAssado();
	       			System.out.println("__________________________________Salgados a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Esfiha .................... R$ 4,40");
	    			System.out.println("                                  [ 2 ] - Empada .................... R$ 6,70");
	       			System.out.println("                                  [ 3 ] - Mini Quiche ............... R$ 9,00");
	       			System.out.println("                                  [ 4 ] - Bolinho de Carne Seca  .... R$ 8,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			  
	       			escolha = lerDadosSalgado.nextInt();
	       			salgado1.escolherQuantidade();
	       			switch (escolha) {
			     	case 1:
			     		salgado1.setNome("Esfiha");
			     		salgado1.setPreco(4.40); 		
			     		break;
			     	case 2:
			     		salgado1.setNome("Empada");
			     		salgado1.setPreco(6.70);
			     		break;
			     	case 3:
			     		salgado1.setNome("Mine Quiche");
			     		salgado1.setPreco(9.00);
			     		break;
			     	case 4:
			     		salgado1.setNome("Bolinho de Carne Seca");
			     		salgado1.setPreco(8.00);
			     		break; 	
			     	default:
			       		System.out.println("Número inválido");
	       			}
		       			
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			System.out.println("                           Você escolheu salgado assado " + salgado1.getNome());
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			mensagemTempoDeEntrega();
		       			distancia = lerDadosSalgado.nextInt();
		     			salgado1.fecharPedido();
		     			salgado1.calcularTempo(distancia);
		       			break;
	       				
	       	case 2:
	       		
		       	Salgado salgado2 = new SalgadoFrito();
		       
		       	System.out.println("__________________________________Salgados a escolher______________________________________________");
				System.out.println(" ");
				System.out.println("                                  [ 1 ] - Pastel ...... R$ 6,00");
				System.out.println("                                  [ 2 ] - Coxinha ..... R$ 5,50");
				System.out.println("                                  [ 3 ] - Quibe ....... R$ 4,00");
				System.out.println("                                  [ 4 ] - Croquete  ... R$ 4,80");
				System.out.println(" Escolha a opção desejada:");
				System.out.println("  ");
				
				escolha = lerDadosSalgado.nextInt();
				salgado2.escolherQuantidade();
				switch (escolha) {
	     	case 1:
	     		salgado2.setNome("Pastel");
	     		salgado2.setPreco(6.00);
	     		break;
	     	case 2:
	     		salgado2.setNome("Coxinha");
	     		salgado2.setPreco(5.50);
	     		break;
	     	case 3:
	     		salgado2.setNome("Quibe");
	     		salgado2.setPreco(4.00);
	     		break;
	     	case 4:
	     		salgado2.setNome("Croquete");
	     		salgado2.setPreco(4.80);
	     		break;
	     	  	
	     	default:
	       		System.out.println("Número inválido");
				}
					
				System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			System.out.println("                            Você escolheu salgado frito " + salgado2.getNome() + salgado2.getQuantidade());
       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			
  
       			mensagemTempoDeEntrega();
       			distancia = lerDadosSalgado.nextInt();
       		
       			salgado2.fecharPedido();
       			salgado2.calcularTempo(distancia);
       			break;       		   			
		
			}	
		
	}
	
				
		public static void mensagemTempoDeEntrega() {
		    pularLinhas(1);
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Para cálculo do tempo de entrega, precisamos saber a distância até sua casa! ");
			System.out.println(" ");
			System.out.println(" Qual a distância da sua casa? (em km) ");
		}
		
		
		public static void pularLinhas(int quantLinhas)
	    {
	            for(int i = 0; i < quantLinhas; i++)
	            System.out.println("");
	    }
		
		public static void agradecimento() {
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Agradecemos a sua preferência e desejamos bom apetite!!!");
			System.out.println(" ");
			
		}
		
		
	
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:5101)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:4584)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.ui 4 0 2022-02-13 23:25:03.125
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:5101)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:4584)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core 4 4 2022-02-13 23:25:05.099
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Lanches;

import java.util.Scanner;


public class ProgramaMain {
	public static void main(String[] args) {
		
		int escolhaDoTipoLanche;
		
		Scanner ler = new Scanner(System.in);
		
		System.out.println("--------------------------Bem vindos ao Delivery do Java Express-------------------------");
		System.out.println("");
		System.out.println("-----------------------------------Menu de opções------------------------------------------");
		System.out.println("				[ 1 ] - Sanduíches ..... R$ 10,00 + 2,00 por ingrediente escolhido");
		System.out.println("				[ 2 ] - Massas ......... R$ (depende do sabor escolhido)");
		System.out.println("				[ 3 ] - Bolos .......... R$ 120,00");
		System.out.println("				[ 4 ] - Salgados ....... (depende do salgado");
		System.out.println("Escolha a opção desejada:");
		
		escolhaDoTipoLanche = ler.nextInt();
		
		switch (escolhaDoTipoLanche) {
	     case 1:
	       	 System.out.println("                              Para o sanduíche precisa escolher os ingredientes                            ");
	    	 System.out.println("__________________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherIngrediente();
	    	 break;
	     case 2:
	    	 System.out.println("                      Você escolheu Massa. Dentre as massas, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeMassa();
	       break;
	             
	     case 3:
	    	 System.out.println("                    Você escolheu Bolo. Escolha cobertura, massa e recheio.");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 escolherBolo();    	 
	    	 break;	 
	     case 4:
	    	 System.out.println("                      Você escolheu Salgado. Dentre os salgados, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeSalgado();
	       break;
	     default:
	       System.out.println("Número inválido");
	  }
		agradecimento();
				
}
	
	public static void escolherIngrediente() {
		int escolhaDoIngrediente=11, contador=0;
		double distancia, quantIngrediente = -1;
		
		Sanduiche lanche1 = new Sanduiche();	
		Scanner lerDados = new Scanner(System.in);
		
		System.out.println("__________________________________________________________________________________________________________________");
		System.out.println("                            1 - queijo        2 - presunto       3 - bacon          4 - alface ");
		System.out.println("                            5 - tomate        6 - catupiry       7 - maionese       8 - abacaxi ");
		System.out.println("                            9 - batata Palha  10 - mostarda      0 - para encerrar a escollha");
		System.out.println(" ");
		System.out.println("                            Você pode escolher até 10 ingredientes: ");
		System.out.println("__________________________________________________________________________________________________________________");
		
		while ((contador < 10) && escolhaDoIngrediente != 0) {
					
			System.out.println("                        Digite o número do ingrediente ou [0] para encerrar a escolha ");
				
			escolhaDoIngrediente = lerDados.nextInt();
			
			switch (escolhaDoIngrediente) {
		     	case 1:
		     		lanche1.setIngrediente("queijo");
		     		break;
		     	case 2:
		     		lanche1.setIngrediente("presunto");
		     		break;
		     	case 3:
		     		lanche1.setIngrediente("bacon");
		     		break;
		     	case 4:
		     		lanche1.setIngrediente("alface");
		     		break;
		     	case 5:
		     		lanche1.setIngrediente("tomate");
		     		break;
		     	case 6:
		     		lanche1.setIngrediente("catupiry");
		     		break;	
		     	case 7:
		     		lanche1.setIngrediente("maionese");
		     		break;
		     	case 8:
		     		lanche1.setIngrediente("abacaxi");
		     		break;
		     	case 9:
		     		lanche1.setIngrediente("batata pallha");
		     		break;	
		     	case 10:
		     		lanche1.setIngrediente("mostarda");
		     		break;
		     	case 0:
		     		break;	
		     	default:
		       		System.out.println("Número inválido");
		     }
			
			contador++;
			quantIngrediente++;
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			lanche1.getIngrediente();
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			System.out.println(" ");		
		}
		
		lanche1.setPreco(10 + quantIngrediente * 2);
		lanche1.escolherQuantidade();
		mensagemTempoDeEntrega();
		distancia = lerDados.nextInt();
		lanche1.fecharPedido();
		lanche1.calcularTempo(distancia);
		
	}	
	
	public static void escolherTipoDeMassa() {
			int escolhaDoTipoMassa, escolhaTipo;
			double distancia;
			
			Scanner lerDados = new Scanner(System.in);
			Scanner ler2 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Macarrãoo..........R$ (escolher o tipo)");
			System.out.println("                                  [ 2 ] - Pizza .............R$ (escolher o sabor)");
			System.out.println("                                  [ 3 ] - Lasanha ...........R$ 45.90");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
			
			
			escolhaDoTipoMassa = ler2.nextInt();
	       
			switch (escolhaDoTipoMassa) {
	       		case 1:
	       			Massa massa1 = new Macarrao();
	       			massa1.setMolho(massa1.escolherMolho());
	
	       			System.out.println("__________________________________Tipos de macarrão a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Talaharim ...... R$ 28,40");
	       			System.out.println("                                  [ 2 ] - Pene ........... R$ 36,70");
	       			System.out.println("                                  [ 3 ] - Parafuso ....... R$ 39,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa1.setSabor("Talharim");
			     		massa1.setPreco(28.40);
			     		
			     		break;
			     	case 2:
			     		massa1.setSabor("Pene");
			     		massa1.setPreco(36.70);
			     		break;
			     	case 3:
			     		massa1.setSabor("Parafuso");
			     		massa1.setPreco(39.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu macarrão " + massa1.getSabor() + " e o molho escolhido foi: " + massa1.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa1.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	     			massa1.fecharPedido();
	     			massa1.calcularTempo(distancia);
	       			break;
	       		case 2:
	       			Massa massa2 = new Pizza();
	       			   			
	       			System.out.println("__________________________________Sabores de pizzas disponíveis______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Calabreza ...... R$ 36,40");
	       			System.out.println("                                  [ 2 ] - Atum ........... R$ 40,60");
	       			System.out.println("                                  [ 3 ] - 4 queijos ...... R$ 41,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa2.setSabor("Calabreza");
			     		massa2.setPreco(36.40);
			     		
			     		break;
			     	case 2:
			     		massa2.setSabor("Atum");
			     		massa2.setPreco(40.60);
			     		break;
			     	case 3:
			     		massa2.setSabor("4 queijos");
			     		massa2.setPreco(41.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu pizza de " + massa2.getSabor()); 
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa2.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa2.fecharPedido();
	       			massa2.calcularTempo(distancia);
	       			break;
	       		case 3:
	       			Massa massa3 = new Lasanha();
	       			massa3.setPreco(45.90);
	       			massa3.setMolho(massa3.escolherMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu lasanha e o molho escolhido foi: " + massa3.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa3.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa3.fecharPedido();
	       			massa3.calcularTempo(distancia);
	       			break;
	       		default:
	       			System.out.println("Número inválido");
	       }	
	}
		

	public static void escolherBolo() {
		int escolhaDoTipoBolo, escolha, contador=0,opcao=2;
		double distancia;
		
		Scanner lerDadosBolo = new Scanner(System.in);
		Scanner ler3 = new Scanner(System.in);
		
		Bolo bolo = new Bolo();
		bolo.setPreco(120.00);
		
		System.out.println("  ");
			System.out.println("__________________________________Tipo de Massa____________________________");
			bolo.setMassa(" Massa de pão de ló");
			System.out.println("                                  [ 1 ] - Massa de pão de ló" );	
			bolo.setMassa("Massa genoise");
			System.out.println("                                  [ 2 ] - Massa genoise");
			bolo.setMassa(" Massa amanteigada");
			System.out.println("                                  [ 3 ] - Massa amanteigada");
			bolo.setMassa(" Massa chiffon");
			System.out.println("                                  [ 4 ] - Massa chiffon" );
			System.out.println(" Escolha a opção desejada:" );
			System.out.println("  ");
			
			
			
			try {
				("1"||, "2"||, "3"||,"4");
			}catch(Exception e) {
				System.out.println("Erro: " + e.getMessage());
			}
			System.out.println("--------------------------------------------------");

			escolhaDoTipoBolo = ler3.nextInt();
			
		switch (escolhaDoTipoBolo) {
	
       		case 1:  
       		
       			System.out.println("  ");
       			System.out.println("__________________________________Cobertura e Recheio____________");
       			System.out.println(" ");
       			System.out.println("                                  [ 1 ] - Cobertura de Pasta Americana e Recheio com Frutas.");
    			System.out.println("                                  [ 2 ] - Cobertura de Fondant e Recheio com Frutas.");
       			System.out.println("                                  [ 3 ] - Cobertura de Chantilly e Recheio com Frutas.");
       			System.out.println("                                  [ 4 ] - Cobertura de Buttercream e Recheio com Frutas.");
       			System.out.println("                                  [ 5 ] - Cobertura de Pasta Americana  e Recheio Cremoso.");
    			System.out.println("                                  [ 6 ] - Cobertura de Fondant  e Recheio Cremoso.");
       			System.out.println("                                  [ 7 ] - Cobertura de Chantilly  e Recheio Cremoso.");
       			System.out.println("                                  [ 8 ] - Cobertura de Buttercream  e Recheio Cremoso.");
       			System.out.println("                                  [ 9 ] - Cobertura de Pasta Americana  e Recheio Gourmet.");
    			System.out.println("                                  [ 10 ] - Cobertura de Fondant  e Recheio Gourmet.");
       			System.out.println("                                  [ 11 ] - Cobertura de Chantilly  e Recheio Gourmet.");
       			System.out.println("                                  [ 12 ] - Cobertura de Buttercream  e Recheio Gourmet.");
       			System.out.println("                                  [ 13 ] - Cobertura de Pasta Americana   e Recheio Clássico.");
    			System.out.println("                                  [ 14 ] - Cobertura de Fondant   e Recheio Clássico.");
       			System.out.println("                                  [ 15 ] - Cobertura de Chantilly  e Recheio Clássico.");
       			System.out.println("                                  [ 16 ] - Cobertura de Buttercream e Recheio Clássico."); 
       			System.out.println(" Escolha a opção desejada:");
       			System.out.println("  ");
       			escolha = lerDadosBolo.nextInt();
       		
       			bolo.escolherQuantidade();
       			switch (escolha) {
       			
		     	case 1:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana e Recheio com Frutas.");
		     		break;
		     	case 2:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant e Recheio com Frutas.");
		     		break;
		     	case 3:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly e Recheio com Frutas.");
		     		break;
		     	case 4:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio com Frutas.");
		     		break; 
		     	case 5:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Cremoso.");
		     		break; 
		     	case 6:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Cremoso.");
		     		break; 
		     	case 7:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Cremoso.");
		     		break; 
		     	case 8:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Cremoso.");
		     		break; 
		     	case 9:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Gourmet.");
		     		break;
		     	case 10:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Gourmet.");
		     		break;
		     	case 11:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Gourmet.");
		     		break;
		     	case 12:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Gourmet.");
		     		break;	
		     	case 13:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana   e Recheio Clássico.");
		     		break;
		     	case 14:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant   e Recheio Clássico.");
		     		break;
		     	case 15:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Clássico.");
		     		break;
		     	case 16:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio Clássico."); 
		     		break;
		 
		     	default:
		       		System.out.println("Número inválido");
       			}
       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu o bolo : " + bolo.getMassa() + " "  + bolo.getRecheioEcobertura());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       		
	       			mensagemTempoDeEntrega();
	       			distancia = lerDadosBolo.nextInt();
		     		bolo.fecharPedido();
		     		bolo.calcularTempo(distancia);
		     		break;	       			
		}
	
}
	
		public static void escolherTipoDeSalgado() {
			int escolhaDoTipoSalgado, escolha;
			double distancia;
			
			Scanner lerDadosSalgado = new Scanner(System.in);
			Scanner ler4 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Salgado Assado...........R$ (escolher o nome)");
			System.out.println("                                  [ 2 ] - Salgado Frito ...........R$ (escolher o nome)");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
				
			escolhaDoTipoSalgado = ler4.nextInt();
	       
			switch (escolhaDoTipoSalgado) {
	       		case 1:
	       			Salgado salgado1 = new SalgadoAssado();
	       			System.out.println("__________________________________Salgados a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Esfiha .................... R$ 4,40");
	    			System.out.println("                                  [ 2 ] - Empada .................... R$ 6,70");
	       			System.out.println("                                  [ 3 ] - Mini Quiche ............... R$ 9,00");
	       			System.out.println("                                  [ 4 ] - Bolinho de Carne Seca  .... R$ 8,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			  
	       			escolha = lerDadosSalgado.nextInt();
	       			salgado1.escolherQuantidade();
	       			switch (escolha) {
			     	case 1:
			     		salgado1.setNome("Esfiha");
			     		salgado1.setPreco(4.40); 		
			     		break;
			     	case 2:
			     		salgado1.setNome("Empada");
			     		salgado1.setPreco(6.70);
			     		break;
			     	case 3:
			     		salgado1.setNome("Mine Quiche");
			     		salgado1.setPreco(9.00);
			     		break;
			     	case 4:
			     		salgado1.setNome("Bolinho de Carne Seca");
			     		salgado1.setPreco(8.00);
			     		break; 	
			     	default:
			       		System.out.println("Número inválido");
	       			}
		       			
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			System.out.println("                           Você escolheu salgado assado " + salgado1.getNome());
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			mensagemTempoDeEntrega();
		       			distancia = lerDadosSalgado.nextInt();
		     			salgado1.fecharPedido();
		     			salgado1.calcularTempo(distancia);
		       			break;
	       				
	       	case 2:
	       		
		       	Salgado salgado2 = new SalgadoFrito();
		       
		       	System.out.println("__________________________________Salgados a escolher______________________________________________");
				System.out.println(" ");
				System.out.println("                                  [ 1 ] - Pastel ...... R$ 6,00");
				System.out.println("                                  [ 2 ] - Coxinha ..... R$ 5,50");
				System.out.println("                                  [ 3 ] - Quibe ....... R$ 4,00");
				System.out.println("                                  [ 4 ] - Croquete  ... R$ 4,80");
				System.out.println(" Escolha a opção desejada:");
				System.out.println("  ");
				
				escolha = lerDadosSalgado.nextInt();
				salgado2.escolherQuantidade();
				switch (escolha) {
	     	case 1:
	     		salgado2.setNome("Pastel");
	     		salgado2.setPreco(6.00);
	     		break;
	     	case 2:
	     		salgado2.setNome("Coxinha");
	     		salgado2.setPreco(5.50);
	     		break;
	     	case 3:
	     		salgado2.setNome("Quibe");
	     		salgado2.setPreco(4.00);
	     		break;
	     	case 4:
	     		salgado2.setNome("Croquete");
	     		salgado2.setPreco(4.80);
	     		break;
	     	  	
	     	default:
	       		System.out.println("Número inválido");
				}
					
				System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			System.out.println("                            Você escolheu salgado frito " + salgado2.getNome() + salgado2.getQuantidade());
       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			
  
       			mensagemTempoDeEntrega();
       			distancia = lerDadosSalgado.nextInt();
       		
       			salgado2.fecharPedido();
       			salgado2.calcularTempo(distancia);
       			break;       		   			
		
			}	
		
	}
	
				
		public static void mensagemTempoDeEntrega() {
		    pularLinhas(1);
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Para cálculo do tempo de entrega, precisamos saber a distância até sua casa! ");
			System.out.println(" ");
			System.out.println(" Qual a distância da sua casa? (em km) ");
		}
		
		
		public static void pularLinhas(int quantLinhas)
	    {
	            for(int i = 0; i < quantLinhas; i++)
	            System.out.println("");
	    }
		
		public static void agradecimento() {
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Agradecemos a sua preferência e desejamos bom apetite!!!");
			System.out.println(" ");
			
		}
		
		
	
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-02-13 23:25:05.100
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-02-13 23:25:05.100
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-02-13 23:25:20.664
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Lanches;

import java.util.Scanner;


public class ProgramaMain {
	public static void main(String[] args) {
		
		int escolhaDoTipoLanche;
		
		Scanner ler = new Scanner(System.in);
		
		System.out.println("--------------------------Bem vindos ao Delivery do Java Express-------------------------");
		System.out.println("");
		System.out.println("-----------------------------------Menu de opções------------------------------------------");
		System.out.println("				[ 1 ] - Sanduíches ..... R$ 10,00 + 2,00 por ingrediente escolhido");
		System.out.println("				[ 2 ] - Massas ......... R$ (depende do sabor escolhido)");
		System.out.println("				[ 3 ] - Bolos .......... R$ 120,00");
		System.out.println("				[ 4 ] - Salgados ....... (depende do salgado");
		System.out.println("Escolha a opção desejada:");
		
		escolhaDoTipoLanche = ler.nextInt();
		
		switch (escolhaDoTipoLanche) {
	     case 1:
	       	 System.out.println("                              Para o sanduíche precisa escolher os ingredientes                            ");
	    	 System.out.println("__________________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherIngrediente();
	    	 break;
	     case 2:
	    	 System.out.println("                      Você escolheu Massa. Dentre as massas, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeMassa();
	       break;
	             
	     case 3:
	    	 System.out.println("                    Você escolheu Bolo. Escolha cobertura, massa e recheio.");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 escolherBolo();    	 
	    	 break;	 
	     case 4:
	    	 System.out.println("                      Você escolheu Salgado. Dentre os salgados, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeSalgado();
	       break;
	     default:
	       System.out.println("Número inválido");
	  }
		agradecimento();
				
}
	
	public static void escolherIngrediente() {
		int escolhaDoIngrediente=11, contador=0;
		double distancia, quantIngrediente = -1;
		
		Sanduiche lanche1 = new Sanduiche();	
		Scanner lerDados = new Scanner(System.in);
		
		System.out.println("__________________________________________________________________________________________________________________");
		System.out.println("                            1 - queijo        2 - presunto       3 - bacon          4 - alface ");
		System.out.println("                            5 - tomate        6 - catupiry       7 - maionese       8 - abacaxi ");
		System.out.println("                            9 - batata Palha  10 - mostarda      0 - para encerrar a escollha");
		System.out.println(" ");
		System.out.println("                            Você pode escolher até 10 ingredientes: ");
		System.out.println("__________________________________________________________________________________________________________________");
		
		while ((contador < 10) && escolhaDoIngrediente != 0) {
					
			System.out.println("                        Digite o número do ingrediente ou [0] para encerrar a escolha ");
				
			escolhaDoIngrediente = lerDados.nextInt();
			
			switch (escolhaDoIngrediente) {
		     	case 1:
		     		lanche1.setIngrediente("queijo");
		     		break;
		     	case 2:
		     		lanche1.setIngrediente("presunto");
		     		break;
		     	case 3:
		     		lanche1.setIngrediente("bacon");
		     		break;
		     	case 4:
		     		lanche1.setIngrediente("alface");
		     		break;
		     	case 5:
		     		lanche1.setIngrediente("tomate");
		     		break;
		     	case 6:
		     		lanche1.setIngrediente("catupiry");
		     		break;	
		     	case 7:
		     		lanche1.setIngrediente("maionese");
		     		break;
		     	case 8:
		     		lanche1.setIngrediente("abacaxi");
		     		break;
		     	case 9:
		     		lanche1.setIngrediente("batata pallha");
		     		break;	
		     	case 10:
		     		lanche1.setIngrediente("mostarda");
		     		break;
		     	case 0:
		     		break;	
		     	default:
		       		System.out.println("Número inválido");
		     }
			
			contador++;
			quantIngrediente++;
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			lanche1.getIngrediente();
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			System.out.println(" ");		
		}
		
		lanche1.setPreco(10 + quantIngrediente * 2);
		lanche1.escolherQuantidade();
		mensagemTempoDeEntrega();
		distancia = lerDados.nextInt();
		lanche1.fecharPedido();
		lanche1.calcularTempo(distancia);
		
	}	
	
	public static void escolherTipoDeMassa() {
			int escolhaDoTipoMassa, escolhaTipo;
			double distancia;
			
			Scanner lerDados = new Scanner(System.in);
			Scanner ler2 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Macarrãoo..........R$ (escolher o tipo)");
			System.out.println("                                  [ 2 ] - Pizza .............R$ (escolher o sabor)");
			System.out.println("                                  [ 3 ] - Lasanha ...........R$ 45.90");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
			
			
			escolhaDoTipoMassa = ler2.nextInt();
	       
			switch (escolhaDoTipoMassa) {
	       		case 1:
	       			Massa massa1 = new Macarrao();
	       			massa1.setMolho(massa1.escolherMolho());
	
	       			System.out.println("__________________________________Tipos de macarrão a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Talaharim ...... R$ 28,40");
	       			System.out.println("                                  [ 2 ] - Pene ........... R$ 36,70");
	       			System.out.println("                                  [ 3 ] - Parafuso ....... R$ 39,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa1.setSabor("Talharim");
			     		massa1.setPreco(28.40);
			     		
			     		break;
			     	case 2:
			     		massa1.setSabor("Pene");
			     		massa1.setPreco(36.70);
			     		break;
			     	case 3:
			     		massa1.setSabor("Parafuso");
			     		massa1.setPreco(39.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu macarrão " + massa1.getSabor() + " e o molho escolhido foi: " + massa1.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa1.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	     			massa1.fecharPedido();
	     			massa1.calcularTempo(distancia);
	       			break;
	       		case 2:
	       			Massa massa2 = new Pizza();
	       			   			
	       			System.out.println("__________________________________Sabores de pizzas disponíveis______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Calabreza ...... R$ 36,40");
	       			System.out.println("                                  [ 2 ] - Atum ........... R$ 40,60");
	       			System.out.println("                                  [ 3 ] - 4 queijos ...... R$ 41,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa2.setSabor("Calabreza");
			     		massa2.setPreco(36.40);
			     		
			     		break;
			     	case 2:
			     		massa2.setSabor("Atum");
			     		massa2.setPreco(40.60);
			     		break;
			     	case 3:
			     		massa2.setSabor("4 queijos");
			     		massa2.setPreco(41.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu pizza de " + massa2.getSabor()); 
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa2.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa2.fecharPedido();
	       			massa2.calcularTempo(distancia);
	       			break;
	       		case 3:
	       			Massa massa3 = new Lasanha();
	       			massa3.setPreco(45.90);
	       			massa3.setMolho(massa3.escolherMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu lasanha e o molho escolhido foi: " + massa3.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa3.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa3.fecharPedido();
	       			massa3.calcularTempo(distancia);
	       			break;
	       		default:
	       			System.out.println("Número inválido");
	       }	
	}
		

	public static void escolherBolo() {
		int escolhaDoTipoBolo, escolha, contador=0,opcao=2;
		double distancia;
		
		Scanner lerDadosBolo = new Scanner(System.in);
		Scanner ler3 = new Scanner(System.in);
		
		Bolo bolo = new Bolo();
		bolo.setPreco(120.00);
		
		System.out.println("  ");
			System.out.println("__________________________________Tipo de Massa____________________________");
			bolo.setMassa(" Massa de pão de ló");
			System.out.println("                                  [ 1 ] - Massa de pão de ló" );	
			bolo.setMassa("Massa genoise");
			System.out.println("                                  [ 2 ] - Massa genoise");
			bolo.setMassa(" Massa amanteigada");
			System.out.println("                                  [ 3 ] - Massa amanteigada");
			bolo.setMassa(" Massa chiffon");
			System.out.println("                                  [ 4 ] - Massa chiffon" );
			System.out.println(" Escolha a opção desejada:" );
			System.out.println("  ");
			
			
			
			try {
				("1"||, "2"||, "3"||,"4");
			}catch(Exception e) {
				System.out.println("Erro: " + e.getMessage());
			}
			System.out.println("--------------------------------------------------");

			escolhaDoTipoBolo = ler3.nextInt();
			
		switch (escolhaDoTipoBolo) {
	
       		case 1:  
       		
       			System.out.println("  ");
       			System.out.println("__________________________________Cobertura e Recheio____________");
       			System.out.println(" ");
       			System.out.println("                                  [ 1 ] - Cobertura de Pasta Americana e Recheio com Frutas.");
    			System.out.println("                                  [ 2 ] - Cobertura de Fondant e Recheio com Frutas.");
       			System.out.println("                                  [ 3 ] - Cobertura de Chantilly e Recheio com Frutas.");
       			System.out.println("                                  [ 4 ] - Cobertura de Buttercream e Recheio com Frutas.");
       			System.out.println("                                  [ 5 ] - Cobertura de Pasta Americana  e Recheio Cremoso.");
    			System.out.println("                                  [ 6 ] - Cobertura de Fondant  e Recheio Cremoso.");
       			System.out.println("                                  [ 7 ] - Cobertura de Chantilly  e Recheio Cremoso.");
       			System.out.println("                                  [ 8 ] - Cobertura de Buttercream  e Recheio Cremoso.");
       			System.out.println("                                  [ 9 ] - Cobertura de Pasta Americana  e Recheio Gourmet.");
    			System.out.println("                                  [ 10 ] - Cobertura de Fondant  e Recheio Gourmet.");
       			System.out.println("                                  [ 11 ] - Cobertura de Chantilly  e Recheio Gourmet.");
       			System.out.println("                                  [ 12 ] - Cobertura de Buttercream  e Recheio Gourmet.");
       			System.out.println("                                  [ 13 ] - Cobertura de Pasta Americana   e Recheio Clássico.");
    			System.out.println("                                  [ 14 ] - Cobertura de Fondant   e Recheio Clássico.");
       			System.out.println("                                  [ 15 ] - Cobertura de Chantilly  e Recheio Clássico.");
       			System.out.println("                                  [ 16 ] - Cobertura de Buttercream e Recheio Clássico."); 
       			System.out.println(" Escolha a opção desejada:");
       			System.out.println("  ");
       			escolha = lerDadosBolo.nextInt();
       		
       			bolo.escolherQuantidade();
       			switch (escolha) {
       			
		     	case 1:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana e Recheio com Frutas.");
		     		break;
		     	case 2:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant e Recheio com Frutas.");
		     		break;
		     	case 3:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly e Recheio com Frutas.");
		     		break;
		     	case 4:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio com Frutas.");
		     		break; 
		     	case 5:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Cremoso.");
		     		break; 
		     	case 6:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Cremoso.");
		     		break; 
		     	case 7:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Cremoso.");
		     		break; 
		     	case 8:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Cremoso.");
		     		break; 
		     	case 9:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Gourmet.");
		     		break;
		     	case 10:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Gourmet.");
		     		break;
		     	case 11:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Gourmet.");
		     		break;
		     	case 12:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Gourmet.");
		     		break;	
		     	case 13:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana   e Recheio Clássico.");
		     		break;
		     	case 14:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant   e Recheio Clássico.");
		     		break;
		     	case 15:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Clássico.");
		     		break;
		     	case 16:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio Clássico."); 
		     		break;
		 
		     	default:
		       		System.out.println("Número inválido");
       			}
       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu o bolo : " + bolo.getMassa() + " "  + bolo.getRecheioEcobertura());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       		
	       			mensagemTempoDeEntrega();
	       			distancia = lerDadosBolo.nextInt();
		     		bolo.fecharPedido();
		     		bolo.calcularTempo(distancia);
		     		break;	       			
		}
	
}
	
		public static void escolherTipoDeSalgado() {
			int escolhaDoTipoSalgado, escolha;
			double distancia;
			
			Scanner lerDadosSalgado = new Scanner(System.in);
			Scanner ler4 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Salgado Assado...........R$ (escolher o nome)");
			System.out.println("                                  [ 2 ] - Salgado Frito ...........R$ (escolher o nome)");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
				
			escolhaDoTipoSalgado = ler4.nextInt();
	       
			switch (escolhaDoTipoSalgado) {
	       		case 1:
	       			Salgado salgado1 = new SalgadoAssado();
	       			System.out.println("__________________________________Salgados a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Esfiha .................... R$ 4,40");
	    			System.out.println("                                  [ 2 ] - Empada .................... R$ 6,70");
	       			System.out.println("                                  [ 3 ] - Mini Quiche ............... R$ 9,00");
	       			System.out.println("                                  [ 4 ] - Bolinho de Carne Seca  .... R$ 8,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			  
	       			escolha = lerDadosSalgado.nextInt();
	       			salgado1.escolherQuantidade();
	       			switch (escolha) {
			     	case 1:
			     		salgado1.setNome("Esfiha");
			     		salgado1.setPreco(4.40); 		
			     		break;
			     	case 2:
			     		salgado1.setNome("Empada");
			     		salgado1.setPreco(6.70);
			     		break;
			     	case 3:
			     		salgado1.setNome("Mine Quiche");
			     		salgado1.setPreco(9.00);
			     		break;
			     	case 4:
			     		salgado1.setNome("Bolinho de Carne Seca");
			     		salgado1.setPreco(8.00);
			     		break; 	
			     	default:
			       		System.out.println("Número inválido");
	       			}
		       			
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			System.out.println("                           Você escolheu salgado assado " + salgado1.getNome());
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			mensagemTempoDeEntrega();
		       			distancia = lerDadosSalgado.nextInt();
		     			salgado1.fecharPedido();
		     			salgado1.calcularTempo(distancia);
		       			break;
	       				
	       	case 2:
	       		
		       	Salgado salgado2 = new SalgadoFrito();
		       
		       	System.out.println("__________________________________Salgados a escolher______________________________________________");
				System.out.println(" ");
				System.out.println("                                  [ 1 ] - Pastel ...... R$ 6,00");
				System.out.println("                                  [ 2 ] - Coxinha ..... R$ 5,50");
				System.out.println("                                  [ 3 ] - Quibe ....... R$ 4,00");
				System.out.println("                                  [ 4 ] - Croquete  ... R$ 4,80");
				System.out.println(" Escolha a opção desejada:");
				System.out.println("  ");
				
				escolha = lerDadosSalgado.nextInt();
				salgado2.escolherQuantidade();
				switch (escolha) {
	     	case 1:
	     		salgado2.setNome("Pastel");
	     		salgado2.setPreco(6.00);
	     		break;
	     	case 2:
	     		salgado2.setNome("Coxinha");
	     		salgado2.setPreco(5.50);
	     		break;
	     	case 3:
	     		salgado2.setNome("Quibe");
	     		salgado2.setPreco(4.00);
	     		break;
	     	case 4:
	     		salgado2.setNome("Croquete");
	     		salgado2.setPreco(4.80);
	     		break;
	     	  	
	     	default:
	       		System.out.println("Número inválido");
				}
					
				System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			System.out.println("                            Você escolheu salgado frito " + salgado2.getNome() + salgado2.getQuantidade());
       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			
  
       			mensagemTempoDeEntrega();
       			distancia = lerDadosSalgado.nextInt();
       		
       			salgado2.fecharPedido();
       			salgado2.calcularTempo(distancia);
       			break;       		   			
		
			}	
		
	}
	
				
		public static void mensagemTempoDeEntrega() {
		    pularLinhas(1);
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Para cálculo do tempo de entrega, precisamos saber a distância até sua casa! ");
			System.out.println(" ");
			System.out.println(" Qual a distância da sua casa? (em km) ");
		}
		
		
		public static void pularLinhas(int quantLinhas)
	    {
	            for(int i = 0; i < quantLinhas; i++)
	            System.out.println("");
	    }
		
		public static void agradecimento() {
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Agradecemos a sua preferência e desejamos bom apetite!!!");
			System.out.println(" ");
			
		}
		
		
	
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-02-13 23:25:20.667
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-02-13 23:25:20.667
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-02-13 23:25:24.311
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Lanches;

import java.util.Scanner;


public class ProgramaMain {
	public static void main(String[] args) {
		
		int escolhaDoTipoLanche;
		
		Scanner ler = new Scanner(System.in);
		
		System.out.println("--------------------------Bem vindos ao Delivery do Java Express-------------------------");
		System.out.println("");
		System.out.println("-----------------------------------Menu de opções------------------------------------------");
		System.out.println("				[ 1 ] - Sanduíches ..... R$ 10,00 + 2,00 por ingrediente escolhido");
		System.out.println("				[ 2 ] - Massas ......... R$ (depende do sabor escolhido)");
		System.out.println("				[ 3 ] - Bolos .......... R$ 120,00");
		System.out.println("				[ 4 ] - Salgados ....... (depende do salgado");
		System.out.println("Escolha a opção desejada:");
		
		escolhaDoTipoLanche = ler.nextInt();
		
		switch (escolhaDoTipoLanche) {
	     case 1:
	       	 System.out.println("                              Para o sanduíche precisa escolher os ingredientes                            ");
	    	 System.out.println("__________________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherIngrediente();
	    	 break;
	     case 2:
	    	 System.out.println("                      Você escolheu Massa. Dentre as massas, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeMassa();
	       break;
	             
	     case 3:
	    	 System.out.println("                    Você escolheu Bolo. Escolha cobertura, massa e recheio.");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 escolherBolo();    	 
	    	 break;	 
	     case 4:
	    	 System.out.println("                      Você escolheu Salgado. Dentre os salgados, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeSalgado();
	       break;
	     default:
	       System.out.println("Número inválido");
	  }
		agradecimento();
				
}
	
	public static void escolherIngrediente() {
		int escolhaDoIngrediente=11, contador=0;
		double distancia, quantIngrediente = -1;
		
		Sanduiche lanche1 = new Sanduiche();	
		Scanner lerDados = new Scanner(System.in);
		
		System.out.println("__________________________________________________________________________________________________________________");
		System.out.println("                            1 - queijo        2 - presunto       3 - bacon          4 - alface ");
		System.out.println("                            5 - tomate        6 - catupiry       7 - maionese       8 - abacaxi ");
		System.out.println("                            9 - batata Palha  10 - mostarda      0 - para encerrar a escollha");
		System.out.println(" ");
		System.out.println("                            Você pode escolher até 10 ingredientes: ");
		System.out.println("__________________________________________________________________________________________________________________");
		
		while ((contador < 10) && escolhaDoIngrediente != 0) {
					
			System.out.println("                        Digite o número do ingrediente ou [0] para encerrar a escolha ");
				
			escolhaDoIngrediente = lerDados.nextInt();
			
			switch (escolhaDoIngrediente) {
		     	case 1:
		     		lanche1.setIngrediente("queijo");
		     		break;
		     	case 2:
		     		lanche1.setIngrediente("presunto");
		     		break;
		     	case 3:
		     		lanche1.setIngrediente("bacon");
		     		break;
		     	case 4:
		     		lanche1.setIngrediente("alface");
		     		break;
		     	case 5:
		     		lanche1.setIngrediente("tomate");
		     		break;
		     	case 6:
		     		lanche1.setIngrediente("catupiry");
		     		break;	
		     	case 7:
		     		lanche1.setIngrediente("maionese");
		     		break;
		     	case 8:
		     		lanche1.setIngrediente("abacaxi");
		     		break;
		     	case 9:
		     		lanche1.setIngrediente("batata pallha");
		     		break;	
		     	case 10:
		     		lanche1.setIngrediente("mostarda");
		     		break;
		     	case 0:
		     		break;	
		     	default:
		       		System.out.println("Número inválido");
		     }
			
			contador++;
			quantIngrediente++;
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			lanche1.getIngrediente();
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			System.out.println(" ");		
		}
		
		lanche1.setPreco(10 + quantIngrediente * 2);
		lanche1.escolherQuantidade();
		mensagemTempoDeEntrega();
		distancia = lerDados.nextInt();
		lanche1.fecharPedido();
		lanche1.calcularTempo(distancia);
		
	}	
	
	public static void escolherTipoDeMassa() {
			int escolhaDoTipoMassa, escolhaTipo;
			double distancia;
			
			Scanner lerDados = new Scanner(System.in);
			Scanner ler2 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Macarrãoo..........R$ (escolher o tipo)");
			System.out.println("                                  [ 2 ] - Pizza .............R$ (escolher o sabor)");
			System.out.println("                                  [ 3 ] - Lasanha ...........R$ 45.90");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
			
			
			escolhaDoTipoMassa = ler2.nextInt();
	       
			switch (escolhaDoTipoMassa) {
	       		case 1:
	       			Massa massa1 = new Macarrao();
	       			massa1.setMolho(massa1.escolherMolho());
	
	       			System.out.println("__________________________________Tipos de macarrão a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Talaharim ...... R$ 28,40");
	       			System.out.println("                                  [ 2 ] - Pene ........... R$ 36,70");
	       			System.out.println("                                  [ 3 ] - Parafuso ....... R$ 39,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa1.setSabor("Talharim");
			     		massa1.setPreco(28.40);
			     		
			     		break;
			     	case 2:
			     		massa1.setSabor("Pene");
			     		massa1.setPreco(36.70);
			     		break;
			     	case 3:
			     		massa1.setSabor("Parafuso");
			     		massa1.setPreco(39.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu macarrão " + massa1.getSabor() + " e o molho escolhido foi: " + massa1.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa1.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	     			massa1.fecharPedido();
	     			massa1.calcularTempo(distancia);
	       			break;
	       		case 2:
	       			Massa massa2 = new Pizza();
	       			   			
	       			System.out.println("__________________________________Sabores de pizzas disponíveis______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Calabreza ...... R$ 36,40");
	       			System.out.println("                                  [ 2 ] - Atum ........... R$ 40,60");
	       			System.out.println("                                  [ 3 ] - 4 queijos ...... R$ 41,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa2.setSabor("Calabreza");
			     		massa2.setPreco(36.40);
			     		
			     		break;
			     	case 2:
			     		massa2.setSabor("Atum");
			     		massa2.setPreco(40.60);
			     		break;
			     	case 3:
			     		massa2.setSabor("4 queijos");
			     		massa2.setPreco(41.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu pizza de " + massa2.getSabor()); 
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa2.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa2.fecharPedido();
	       			massa2.calcularTempo(distancia);
	       			break;
	       		case 3:
	       			Massa massa3 = new Lasanha();
	       			massa3.setPreco(45.90);
	       			massa3.setMolho(massa3.escolherMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu lasanha e o molho escolhido foi: " + massa3.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa3.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa3.fecharPedido();
	       			massa3.calcularTempo(distancia);
	       			break;
	       		default:
	       			System.out.println("Número inválido");
	       }	
	}
		

	public static void escolherBolo() {
		int escolhaDoTipoBolo, escolha, contador=0,opcao=2;
		double distancia;
		
		Scanner lerDadosBolo = new Scanner(System.in);
		Scanner ler3 = new Scanner(System.in);
		
		Bolo bolo = new Bolo();
		bolo.setPreco(120.00);
		
		System.out.println("  ");
			System.out.println("__________________________________Tipo de Massa____________________________");
			bolo.setMassa(" Massa de pão de ló");
			System.out.println("                                  [ 1 ] - Massa de pão de ló" );	
			bolo.setMassa("Massa genoise");
			System.out.println("                                  [ 2 ] - Massa genoise");
			bolo.setMassa(" Massa amanteigada");
			System.out.println("                                  [ 3 ] - Massa amanteigada");
			bolo.setMassa(" Massa chiffon");
			System.out.println("                                  [ 4 ] - Massa chiffon" );
			System.out.println(" Escolha a opção desejada:" );
			System.out.println("  ");
			
			
			
			try {
				("1"||, "2"||, "3"||,"4");
			}catch(Exception e) {
				System.out.println("Erro: " + e.getMessage());
			}
			System.out.println("--------------------------------------------------");

			escolhaDoTipoBolo = ler3.nextInt();
			
		switch (escolhaDoTipoBolo) {
	
       		case 1:  
       		
       			System.out.println("  ");
       			System.out.println("__________________________________Cobertura e Recheio____________");
       			System.out.println(" ");
       			System.out.println("                                  [ 1 ] - Cobertura de Pasta Americana e Recheio com Frutas.");
    			System.out.println("                                  [ 2 ] - Cobertura de Fondant e Recheio com Frutas.");
       			System.out.println("                                  [ 3 ] - Cobertura de Chantilly e Recheio com Frutas.");
       			System.out.println("                                  [ 4 ] - Cobertura de Buttercream e Recheio com Frutas.");
       			System.out.println("                                  [ 5 ] - Cobertura de Pasta Americana  e Recheio Cremoso.");
    			System.out.println("                                  [ 6 ] - Cobertura de Fondant  e Recheio Cremoso.");
       			System.out.println("                                  [ 7 ] - Cobertura de Chantilly  e Recheio Cremoso.");
       			System.out.println("                                  [ 8 ] - Cobertura de Buttercream  e Recheio Cremoso.");
       			System.out.println("                                  [ 9 ] - Cobertura de Pasta Americana  e Recheio Gourmet.");
    			System.out.println("                                  [ 10 ] - Cobertura de Fondant  e Recheio Gourmet.");
       			System.out.println("                                  [ 11 ] - Cobertura de Chantilly  e Recheio Gourmet.");
       			System.out.println("                                  [ 12 ] - Cobertura de Buttercream  e Recheio Gourmet.");
       			System.out.println("                                  [ 13 ] - Cobertura de Pasta Americana   e Recheio Clássico.");
    			System.out.println("                                  [ 14 ] - Cobertura de Fondant   e Recheio Clássico.");
       			System.out.println("                                  [ 15 ] - Cobertura de Chantilly  e Recheio Clássico.");
       			System.out.println("                                  [ 16 ] - Cobertura de Buttercream e Recheio Clássico."); 
       			System.out.println(" Escolha a opção desejada:");
       			System.out.println("  ");
       			escolha = lerDadosBolo.nextInt();
       		
       			bolo.escolherQuantidade();
       			switch (escolha) {
       			
		     	case 1:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana e Recheio com Frutas.");
		     		break;
		     	case 2:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant e Recheio com Frutas.");
		     		break;
		     	case 3:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly e Recheio com Frutas.");
		     		break;
		     	case 4:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio com Frutas.");
		     		break; 
		     	case 5:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Cremoso.");
		     		break; 
		     	case 6:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Cremoso.");
		     		break; 
		     	case 7:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Cremoso.");
		     		break; 
		     	case 8:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Cremoso.");
		     		break; 
		     	case 9:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Gourmet.");
		     		break;
		     	case 10:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Gourmet.");
		     		break;
		     	case 11:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Gourmet.");
		     		break;
		     	case 12:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Gourmet.");
		     		break;	
		     	case 13:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana   e Recheio Clássico.");
		     		break;
		     	case 14:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant   e Recheio Clássico.");
		     		break;
		     	case 15:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Clássico.");
		     		break;
		     	case 16:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio Clássico."); 
		     		break;
		 
		     	default:
		       		System.out.println("Número inválido");
       			}
       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu o bolo : " + bolo.getMassa() + " "  + bolo.getRecheioEcobertura());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       		
	       			mensagemTempoDeEntrega();
	       			distancia = lerDadosBolo.nextInt();
		     		bolo.fecharPedido();
		     		bolo.calcularTempo(distancia);
		     		break;	       			
		}
	
}
	
		public static void escolherTipoDeSalgado() {
			int escolhaDoTipoSalgado, escolha;
			double distancia;
			
			Scanner lerDadosSalgado = new Scanner(System.in);
			Scanner ler4 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Salgado Assado...........R$ (escolher o nome)");
			System.out.println("                                  [ 2 ] - Salgado Frito ...........R$ (escolher o nome)");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
				
			escolhaDoTipoSalgado = ler4.nextInt();
	       
			switch (escolhaDoTipoSalgado) {
	       		case 1:
	       			Salgado salgado1 = new SalgadoAssado();
	       			System.out.println("__________________________________Salgados a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Esfiha .................... R$ 4,40");
	    			System.out.println("                                  [ 2 ] - Empada .................... R$ 6,70");
	       			System.out.println("                                  [ 3 ] - Mini Quiche ............... R$ 9,00");
	       			System.out.println("                                  [ 4 ] - Bolinho de Carne Seca  .... R$ 8,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			  
	       			escolha = lerDadosSalgado.nextInt();
	       			salgado1.escolherQuantidade();
	       			switch (escolha) {
			     	case 1:
			     		salgado1.setNome("Esfiha");
			     		salgado1.setPreco(4.40); 		
			     		break;
			     	case 2:
			     		salgado1.setNome("Empada");
			     		salgado1.setPreco(6.70);
			     		break;
			     	case 3:
			     		salgado1.setNome("Mine Quiche");
			     		salgado1.setPreco(9.00);
			     		break;
			     	case 4:
			     		salgado1.setNome("Bolinho de Carne Seca");
			     		salgado1.setPreco(8.00);
			     		break; 	
			     	default:
			       		System.out.println("Número inválido");
	       			}
		       			
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			System.out.println("                           Você escolheu salgado assado " + salgado1.getNome());
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			mensagemTempoDeEntrega();
		       			distancia = lerDadosSalgado.nextInt();
		     			salgado1.fecharPedido();
		     			salgado1.calcularTempo(distancia);
		       			break;
	       				
	       	case 2:
	       		
		       	Salgado salgado2 = new SalgadoFrito();
		       
		       	System.out.println("__________________________________Salgados a escolher______________________________________________");
				System.out.println(" ");
				System.out.println("                                  [ 1 ] - Pastel ...... R$ 6,00");
				System.out.println("                                  [ 2 ] - Coxinha ..... R$ 5,50");
				System.out.println("                                  [ 3 ] - Quibe ....... R$ 4,00");
				System.out.println("                                  [ 4 ] - Croquete  ... R$ 4,80");
				System.out.println(" Escolha a opção desejada:");
				System.out.println("  ");
				
				escolha = lerDadosSalgado.nextInt();
				salgado2.escolherQuantidade();
				switch (escolha) {
	     	case 1:
	     		salgado2.setNome("Pastel");
	     		salgado2.setPreco(6.00);
	     		break;
	     	case 2:
	     		salgado2.setNome("Coxinha");
	     		salgado2.setPreco(5.50);
	     		break;
	     	case 3:
	     		salgado2.setNome("Quibe");
	     		salgado2.setPreco(4.00);
	     		break;
	     	case 4:
	     		salgado2.setNome("Croquete");
	     		salgado2.setPreco(4.80);
	     		break;
	     	  	
	     	default:
	       		System.out.println("Número inválido");
				}
					
				System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			System.out.println("                            Você escolheu salgado frito " + salgado2.getNome() + salgado2.getQuantidade());
       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			
  
       			mensagemTempoDeEntrega();
       			distancia = lerDadosSalgado.nextInt();
       		
       			salgado2.fecharPedido();
       			salgado2.calcularTempo(distancia);
       			break;       		   			
		
			}	
		
	}
	
				
		public static void mensagemTempoDeEntrega() {
		    pularLinhas(1);
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Para cálculo do tempo de entrega, precisamos saber a distância até sua casa! ");
			System.out.println(" ");
			System.out.println(" Qual a distância da sua casa? (em km) ");
		}
		
		
		public static void pularLinhas(int quantLinhas)
	    {
	            for(int i = 0; i < quantLinhas; i++)
	            System.out.println("");
	    }
		
		public static void agradecimento() {
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Agradecemos a sua preferência e desejamos bom apetite!!!");
			System.out.println(" ");
			
		}
		
		
	
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-02-13 23:25:24.312
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-02-13 23:25:24.312
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-02-13 23:25:24.823
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Lanches;

import java.util.Scanner;


public class ProgramaMain {
	public static void main(String[] args) {
		
		int escolhaDoTipoLanche;
		
		Scanner ler = new Scanner(System.in);
		
		System.out.println("--------------------------Bem vindos ao Delivery do Java Express-------------------------");
		System.out.println("");
		System.out.println("-----------------------------------Menu de opções------------------------------------------");
		System.out.println("				[ 1 ] - Sanduíches ..... R$ 10,00 + 2,00 por ingrediente escolhido");
		System.out.println("				[ 2 ] - Massas ......... R$ (depende do sabor escolhido)");
		System.out.println("				[ 3 ] - Bolos .......... R$ 120,00");
		System.out.println("				[ 4 ] - Salgados ....... (depende do salgado");
		System.out.println("Escolha a opção desejada:");
		
		escolhaDoTipoLanche = ler.nextInt();
		
		switch (escolhaDoTipoLanche) {
	     case 1:
	       	 System.out.println("                              Para o sanduíche precisa escolher os ingredientes                            ");
	    	 System.out.println("__________________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherIngrediente();
	    	 break;
	     case 2:
	    	 System.out.println("                      Você escolheu Massa. Dentre as massas, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeMassa();
	       break;
	             
	     case 3:
	    	 System.out.println("                    Você escolheu Bolo. Escolha cobertura, massa e recheio.");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 escolherBolo();    	 
	    	 break;	 
	     case 4:
	    	 System.out.println("                      Você escolheu Salgado. Dentre os salgados, você pode escolher entre:                      ");
	    	 System.out.println("___________________________________________________________________________________________________________ ");
	    	 System.out.println(" ");
	    	 escolherTipoDeSalgado();
	       break;
	     default:
	       System.out.println("Número inválido");
	  }
		agradecimento();
				
}
	
	public static void escolherIngrediente() {
		int escolhaDoIngrediente=11, contador=0;
		double distancia, quantIngrediente = -1;
		
		Sanduiche lanche1 = new Sanduiche();	
		Scanner lerDados = new Scanner(System.in);
		
		System.out.println("__________________________________________________________________________________________________________________");
		System.out.println("                            1 - queijo        2 - presunto       3 - bacon          4 - alface ");
		System.out.println("                            5 - tomate        6 - catupiry       7 - maionese       8 - abacaxi ");
		System.out.println("                            9 - batata Palha  10 - mostarda      0 - para encerrar a escollha");
		System.out.println(" ");
		System.out.println("                            Você pode escolher até 10 ingredientes: ");
		System.out.println("__________________________________________________________________________________________________________________");
		
		while ((contador < 10) && escolhaDoIngrediente != 0) {
					
			System.out.println("                        Digite o número do ingrediente ou [0] para encerrar a escolha ");
				
			escolhaDoIngrediente = lerDados.nextInt();
			
			switch (escolhaDoIngrediente) {
		     	case 1:
		     		lanche1.setIngrediente("queijo");
		     		break;
		     	case 2:
		     		lanche1.setIngrediente("presunto");
		     		break;
		     	case 3:
		     		lanche1.setIngrediente("bacon");
		     		break;
		     	case 4:
		     		lanche1.setIngrediente("alface");
		     		break;
		     	case 5:
		     		lanche1.setIngrediente("tomate");
		     		break;
		     	case 6:
		     		lanche1.setIngrediente("catupiry");
		     		break;	
		     	case 7:
		     		lanche1.setIngrediente("maionese");
		     		break;
		     	case 8:
		     		lanche1.setIngrediente("abacaxi");
		     		break;
		     	case 9:
		     		lanche1.setIngrediente("batata pallha");
		     		break;	
		     	case 10:
		     		lanche1.setIngrediente("mostarda");
		     		break;
		     	case 0:
		     		break;	
		     	default:
		       		System.out.println("Número inválido");
		     }
			
			contador++;
			quantIngrediente++;
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			lanche1.getIngrediente();
			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
			System.out.println(" ");		
		}
		
		lanche1.setPreco(10 + quantIngrediente * 2);
		lanche1.escolherQuantidade();
		mensagemTempoDeEntrega();
		distancia = lerDados.nextInt();
		lanche1.fecharPedido();
		lanche1.calcularTempo(distancia);
		
	}	
	
	public static void escolherTipoDeMassa() {
			int escolhaDoTipoMassa, escolhaTipo;
			double distancia;
			
			Scanner lerDados = new Scanner(System.in);
			Scanner ler2 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Macarrãoo..........R$ (escolher o tipo)");
			System.out.println("                                  [ 2 ] - Pizza .............R$ (escolher o sabor)");
			System.out.println("                                  [ 3 ] - Lasanha ...........R$ 45.90");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
			
			
			escolhaDoTipoMassa = ler2.nextInt();
	       
			switch (escolhaDoTipoMassa) {
	       		case 1:
	       			Massa massa1 = new Macarrao();
	       			massa1.setMolho(massa1.escolherMolho());
	
	       			System.out.println("__________________________________Tipos de macarrão a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Talaharim ...... R$ 28,40");
	       			System.out.println("                                  [ 2 ] - Pene ........... R$ 36,70");
	       			System.out.println("                                  [ 3 ] - Parafuso ....... R$ 39,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa1.setSabor("Talharim");
			     		massa1.setPreco(28.40);
			     		
			     		break;
			     	case 2:
			     		massa1.setSabor("Pene");
			     		massa1.setPreco(36.70);
			     		break;
			     	case 3:
			     		massa1.setSabor("Parafuso");
			     		massa1.setPreco(39.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu macarrão " + massa1.getSabor() + " e o molho escolhido foi: " + massa1.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa1.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	     			massa1.fecharPedido();
	     			massa1.calcularTempo(distancia);
	       			break;
	       		case 2:
	       			Massa massa2 = new Pizza();
	       			   			
	       			System.out.println("__________________________________Sabores de pizzas disponíveis______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Calabreza ...... R$ 36,40");
	       			System.out.println("                                  [ 2 ] - Atum ........... R$ 40,60");
	       			System.out.println("                                  [ 3 ] - 4 queijos ...... R$ 41,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			
	       			escolhaTipo = lerDados.nextInt();
	       			switch (escolhaTipo) {
			     	case 1:
			     		massa2.setSabor("Calabreza");
			     		massa2.setPreco(36.40);
			     		
			     		break;
			     	case 2:
			     		massa2.setSabor("Atum");
			     		massa2.setPreco(40.60);
			     		break;
			     	case 3:
			     		massa2.setSabor("4 queijos");
			     		massa2.setPreco(41.00);
			     		break;
			     	
			     	default:
			       		System.out.println("Número inválido");
			     }
	       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu pizza de " + massa2.getSabor()); 
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa2.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa2.fecharPedido();
	       			massa2.calcularTempo(distancia);
	       			break;
	       		case 3:
	       			Massa massa3 = new Lasanha();
	       			massa3.setPreco(45.90);
	       			massa3.setMolho(massa3.escolherMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                            Você escolheu lasanha e o molho escolhido foi: " + massa3.getMolho());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			massa3.escolherQuantidade();
	       			mensagemTempoDeEntrega();
	       			distancia = lerDados.nextInt();
	       			massa3.fecharPedido();
	       			massa3.calcularTempo(distancia);
	       			break;
	       		default:
	       			System.out.println("Número inválido");
	       }	
	}
		

	public static void escolherBolo() {
		int escolhaDoTipoBolo, escolha, contador=0,opcao=2;
		double distancia;
		
		Scanner lerDadosBolo = new Scanner(System.in);
		Scanner ler3 = new Scanner(System.in);
		
		Bolo bolo = new Bolo();
		bolo.setPreco(120.00);
		
		System.out.println("  ");
			System.out.println("__________________________________Tipo de Massa____________________________");
			bolo.setMassa(" Massa de pão de ló");
			System.out.println("                                  [ 1 ] - Massa de pão de ló" );	
			bolo.setMassa("Massa genoise");
			System.out.println("                                  [ 2 ] - Massa genoise");
			bolo.setMassa(" Massa amanteigada");
			System.out.println("                                  [ 3 ] - Massa amanteigada");
			bolo.setMassa(" Massa chiffon");
			System.out.println("                                  [ 4 ] - Massa chiffon" );
			System.out.println(" Escolha a opção desejada:" );
			System.out.println("  ");
			
			
			
			try {
				("1"||, "2"||, "3"||,"4");
			}catch(Exception e) {
				System.out.println("Erro: " + e.getMessage());
			}
			System.out.println("--------------------------------------------------");

			escolhaDoTipoBolo = ler3.nextInt();
			
		switch (escolhaDoTipoBolo) {
	
       		case 1:  
       		
       			System.out.println("  ");
       			System.out.println("__________________________________Cobertura e Recheio____________");
       			System.out.println(" ");
       			System.out.println("                                  [ 1 ] - Cobertura de Pasta Americana e Recheio com Frutas.");
    			System.out.println("                                  [ 2 ] - Cobertura de Fondant e Recheio com Frutas.");
       			System.out.println("                                  [ 3 ] - Cobertura de Chantilly e Recheio com Frutas.");
       			System.out.println("                                  [ 4 ] - Cobertura de Buttercream e Recheio com Frutas.");
       			System.out.println("                                  [ 5 ] - Cobertura de Pasta Americana  e Recheio Cremoso.");
    			System.out.println("                                  [ 6 ] - Cobertura de Fondant  e Recheio Cremoso.");
       			System.out.println("                                  [ 7 ] - Cobertura de Chantilly  e Recheio Cremoso.");
       			System.out.println("                                  [ 8 ] - Cobertura de Buttercream  e Recheio Cremoso.");
       			System.out.println("                                  [ 9 ] - Cobertura de Pasta Americana  e Recheio Gourmet.");
    			System.out.println("                                  [ 10 ] - Cobertura de Fondant  e Recheio Gourmet.");
       			System.out.println("                                  [ 11 ] - Cobertura de Chantilly  e Recheio Gourmet.");
       			System.out.println("                                  [ 12 ] - Cobertura de Buttercream  e Recheio Gourmet.");
       			System.out.println("                                  [ 13 ] - Cobertura de Pasta Americana   e Recheio Clássico.");
    			System.out.println("                                  [ 14 ] - Cobertura de Fondant   e Recheio Clássico.");
       			System.out.println("                                  [ 15 ] - Cobertura de Chantilly  e Recheio Clássico.");
       			System.out.println("                                  [ 16 ] - Cobertura de Buttercream e Recheio Clássico."); 
       			System.out.println(" Escolha a opção desejada:");
       			System.out.println("  ");
       			escolha = lerDadosBolo.nextInt();
       		
       			bolo.escolherQuantidade();
       			switch (escolha) {
       			
		     	case 1:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana e Recheio com Frutas.");
		     		break;
		     	case 2:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant e Recheio com Frutas.");
		     		break;
		     	case 3:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly e Recheio com Frutas.");
		     		break;
		     	case 4:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio com Frutas.");
		     		break; 
		     	case 5:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Cremoso.");
		     		break; 
		     	case 6:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Cremoso.");
		     		break; 
		     	case 7:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Cremoso.");
		     		break; 
		     	case 8:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Cremoso.");
		     		break; 
		     	case 9:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana  e Recheio Gourmet.");
		     		break;
		     	case 10:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant  e Recheio Gourmet.");
		     		break;
		     	case 11:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Gourmet.");
		     		break;
		     	case 12:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream  e Recheio Gourmet.");
		     		break;	
		     	case 13:
		     		bolo.setRecheioEcobertura("Cobertura de Pasta Americana   e Recheio Clássico.");
		     		break;
		     	case 14:
		     		bolo.setRecheioEcobertura("Cobertura de Fondant   e Recheio Clássico.");
		     		break;
		     	case 15:
		     		bolo.setRecheioEcobertura("Cobertura de Chantilly  e Recheio Clássico.");
		     		break;
		     	case 16:
		     		bolo.setRecheioEcobertura("Cobertura de Buttercream e Recheio Clássico."); 
		     		break;
		 
		     	default:
		       		System.out.println("Número inválido");
       			}
       			
	       			
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       			System.out.println("                           Você escolheu o bolo : " + bolo.getMassa() + " "  + bolo.getRecheioEcobertura());
	       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
	       		
	       			mensagemTempoDeEntrega();
	       			distancia = lerDadosBolo.nextInt();
		     		bolo.fecharPedido();
		     		bolo.calcularTempo(distancia);
		     		break;	       			
		}
	
}
	
		public static void escolherTipoDeSalgado() {
			int escolhaDoTipoSalgado, escolha;
			double distancia;
			
			Scanner lerDadosSalgado = new Scanner(System.in);
			Scanner ler4 = new Scanner(System.in);
			
			System.out.println("__________________________________Menu de opções____________________________________________________________");
			System.out.println(" ");
			System.out.println("                                  [ 1 ] - Salgado Assado...........R$ (escolher o nome)");
			System.out.println("                                  [ 2 ] - Salgado Frito ...........R$ (escolher o nome)");
			System.out.println(" Escolha a opção desejada:");
			System.out.println("  ");
				
			escolhaDoTipoSalgado = ler4.nextInt();
	       
			switch (escolhaDoTipoSalgado) {
	       		case 1:
	       			Salgado salgado1 = new SalgadoAssado();
	       			System.out.println("__________________________________Salgados a escolher______________________________________________");
	       			System.out.println(" ");
	       			System.out.println("                                  [ 1 ] - Esfiha .................... R$ 4,40");
	    			System.out.println("                                  [ 2 ] - Empada .................... R$ 6,70");
	       			System.out.println("                                  [ 3 ] - Mini Quiche ............... R$ 9,00");
	       			System.out.println("                                  [ 4 ] - Bolinho de Carne Seca  .... R$ 8,00");
	       			System.out.println(" Escolha a opção desejada:");
	       			System.out.println("  ");
	       			  
	       			escolha = lerDadosSalgado.nextInt();
	       			salgado1.escolherQuantidade();
	       			switch (escolha) {
			     	case 1:
			     		salgado1.setNome("Esfiha");
			     		salgado1.setPreco(4.40); 		
			     		break;
			     	case 2:
			     		salgado1.setNome("Empada");
			     		salgado1.setPreco(6.70);
			     		break;
			     	case 3:
			     		salgado1.setNome("Mine Quiche");
			     		salgado1.setPreco(9.00);
			     		break;
			     	case 4:
			     		salgado1.setNome("Bolinho de Carne Seca");
			     		salgado1.setPreco(8.00);
			     		break; 	
			     	default:
			       		System.out.println("Número inválido");
	       			}
		       			
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			System.out.println("                           Você escolheu salgado assado " + salgado1.getNome());
		       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
		       			mensagemTempoDeEntrega();
		       			distancia = lerDadosSalgado.nextInt();
		     			salgado1.fecharPedido();
		     			salgado1.calcularTempo(distancia);
		       			break;
	       				
	       	case 2:
	       		
		       	Salgado salgado2 = new SalgadoFrito();
		       
		       	System.out.println("__________________________________Salgados a escolher______________________________________________");
				System.out.println(" ");
				System.out.println("                                  [ 1 ] - Pastel ...... R$ 6,00");
				System.out.println("                                  [ 2 ] - Coxinha ..... R$ 5,50");
				System.out.println("                                  [ 3 ] - Quibe ....... R$ 4,00");
				System.out.println("                                  [ 4 ] - Croquete  ... R$ 4,80");
				System.out.println(" Escolha a opção desejada:");
				System.out.println("  ");
				
				escolha = lerDadosSalgado.nextInt();
				salgado2.escolherQuantidade();
				switch (escolha) {
	     	case 1:
	     		salgado2.setNome("Pastel");
	     		salgado2.setPreco(6.00);
	     		break;
	     	case 2:
	     		salgado2.setNome("Coxinha");
	     		salgado2.setPreco(5.50);
	     		break;
	     	case 3:
	     		salgado2.setNome("Quibe");
	     		salgado2.setPreco(4.00);
	     		break;
	     	case 4:
	     		salgado2.setNome("Croquete");
	     		salgado2.setPreco(4.80);
	     		break;
	     	  	
	     	default:
	       		System.out.println("Número inválido");
				}
					
				System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			System.out.println("                            Você escolheu salgado frito " + salgado2.getNome() + salgado2.getQuantidade());
       			System.out.println(" ----------------------------------------------------------------------------------------------------------- ");
       			
  
       			mensagemTempoDeEntrega();
       			distancia = lerDadosSalgado.nextInt();
       		
       			salgado2.fecharPedido();
       			salgado2.calcularTempo(distancia);
       			break;       		   			
		
			}	
		
	}
	
				
		public static void mensagemTempoDeEntrega() {
		    pularLinhas(1);
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Para cálculo do tempo de entrega, precisamos saber a distância até sua casa! ");
			System.out.println(" ");
			System.out.println(" Qual a distância da sua casa? (em km) ");
		}
		
		
		public static void pularLinhas(int quantLinhas)
	    {
	            for(int i = 0; i < quantLinhas; i++)
	            System.out.println("");
	    }
		
		public static void agradecimento() {
			System.out.println(" _______________________________________________________________________________________________________________ ");
			System.out.println(" ");
			System.out.println("                Agradecemos a sua preferência e desejamos bom apetite!!!");
			System.out.println(" ");
			
		}
		
		
	
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1937)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1514)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1541)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1524)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1563)
	at org.eclipse.swt.widgets.Widget.gtk_key_press_event(Widget.java:924)
	at org.eclipse.swt.widgets.Control.gtk_key_press_event(Control.java:3992)
	at org.eclipse.swt.widgets.Composite.gtk_key_press_event(Composite.java:921)
	at org.eclipse.swt.widgets.Widget.windowProc(Widget.java:2408)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:6833)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:6197)
	at org.eclipse.swt.internal.gtk3.GTK3.gtk_main_do_event(Native Method)
	at org.eclipse.swt.widgets.Display.eventProc(Display.java:1565)
	at org.eclipse.swt.internal.gtk3.GTK3.gtk_main_iteration_do(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:4578)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-02-13 23:25:24.825
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1937)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1514)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1541)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1524)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1563)
	at org.eclipse.swt.widgets.Widget.gtk_key_press_event(Widget.java:924)
	at org.eclipse.swt.widgets.Control.gtk_key_press_event(Control.java:3992)
	at org.eclipse.swt.widgets.Composite.gtk_key_press_event(Composite.java:921)
	at org.eclipse.swt.widgets.Widget.windowProc(Widget.java:2408)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:6833)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:6197)
	at org.eclipse.swt.internal.gtk3.GTK3.gtk_main_do_event(Native Method)
	at org.eclipse.swt.widgets.Display.eventProc(Display.java:1565)
	at org.eclipse.swt.internal.gtk3.GTK3.gtk_main_iteration_do(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:4578)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-02-13 23:25:24.826
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3278)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3055)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1937)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1514)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1541)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1524)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1563)
	at org.eclipse.swt.widgets.Widget.gtk_key_press_event(Widget.java:924)
	at org.eclipse.swt.widgets.Control.gtk_key_press_event(Control.java:3992)
	at org.eclipse.swt.widgets.Composite.gtk_key_press_event(Composite.java:921)
	at org.eclipse.swt.widgets.Widget.windowProc(Widget.java:2408)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:6833)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:6197)
	at org.eclipse.swt.internal.gtk3.GTK3.gtk_main_do_event(Native Method)
	at org.eclipse.swt.widgets.Display.eventProc(Display.java:1565)
	at org.eclipse.swt.internal.gtk3.GTK3.gtk_main_iteration_do(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:4578)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)
